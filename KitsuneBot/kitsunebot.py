import random
import string
import os
import re
from settings import boneses_ref, boneses_link, count_days_mess, count_bonus_timed, count_days_mess_out, admins, works
from settings import procent_my, procent_ref, procent_my2, check_sum_if2, procent_my3, check_sum_if3, procent_my4, check_sum_if4

import telebot
import sqlite3
import threading
import time
from time import sleep

from telebot import types
from telebot import apihelper
from datetime import datetime, timedelta

# –ë–∞–≥–∏:
# –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–± —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ –∫–æ–¥–∞

# –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞. –í–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ —Å–µ–∫—Ä–µ—Ç–µ
apihelper.proxy = {'http':'http://46.8.31.182:22'}
bot = telebot.TeleBot('6722805471:AAGU74P1PXwKQ4Cfo3LL_hXF00LdQ4Jyaz0') # –¢–æ–∫–µ–Ω

# –ù—É–∂–Ω–∞—è —à—Ç—É–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –±–∞–≥–æ–≤
user_states = {} # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç user states –∞ –∏–º–µ–Ω–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞. —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ –Ω–µ–≥–æ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –¥–≤–∞–∂–¥—ã
admin_states = {}
user_msg = []
user_not_days = {}
polls = {}

current_user_reg = {}

# –û–ø—Ä–æ—Å–Ω–∏–∫ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! --------------------------------------------------------------------------------------------
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
votes = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø—Ä–æ—Å–æ–≤
current_polls = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤, –≤–∫–ª—é—á–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
poll_results = {}

# –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
_conn = sqlite3.connect('Polls.kts', check_same_thread=False)
_cur = _conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
_cur.execute('''CREATE TABLE IF NOT EXISTS polls (
                    poll_id TEXT PRIMARY KEY,
                    question TEXT
                 )''')

_cur.execute('''CREATE TABLE IF NOT EXISTS options (
                    poll_id TEXT,
                    option TEXT,
                    votes INTEGER,
                    FOREIGN KEY (poll_id) REFERENCES polls (poll_id)
                 )''')

_cur.execute('''CREATE TABLE IF NOT EXISTS user_votes (
                    user_id INTEGER,
                    poll_id TEXT,
                    vote TEXT,
                    PRIMARY KEY (user_id, poll_id),
                    FOREIGN KEY (poll_id) REFERENCES polls (poll_id)
                 )''')

_conn.commit()
# --------------------------------------------------------------------------------------------------------------------

# –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
for filename in os.listdir('./Temp'):
    file_path = os.path.join('./Temp', filename)
    try:
        if os.path.isfile(file_path):
            os.remove(file_path)
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}. {e}')

# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ "/start"
@bot.message_handler(commands=['start'])
def start(message):
    #–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id]:
        return
    user_states[user_id] = True
    msgs_id = []
    msgs_id.append(user_id)
    msgs_id.append(message)

    markupr = types.InlineKeyboardMarkup()
    btn_reg = types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='reg')
    markupr.add(btn_reg)

    markup = types.InlineKeyboardMarkup()
    btn_mn = types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')
    markup.add(btn_mn)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute(
        'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name varchar(25), number varchar(12), sex varchar(3), date_born varchar(10), ref_link varchar(7), chat_id varchar(10), user_id varchar(33), bonus INT NOT NULL, date_register varchar(10), my_referer varchar(33), count_checks INT NOT NULL, sum_checks INT NOT NULL, procent_my REAL NOT NULL, procent_ref REAL NOT NULL)')
    cur.execute(
        'CREATE TABLE IF NOT EXISTS bonuses (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INT NOT NULL, number INT NOT NULL, bonuses INT NOT NULL, count_day INT NOT NULL)')
    conn.commit()

    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    for el in users:
        if str(user_id) == str(el[7]):
            msg = bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ö–∏—Ç—Å—É–Ω–µ!\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.')
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states[user_id] = False
            msgs_id.append(msg)
            cur.close()
            conn.close()
            user_msg.append(msgs_id)
            menu(message)
            return
    cur.close()
    conn.close()

    msg = bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ö–∏—Ç—Å—É–Ω–µ!\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states[user_id] = False
    register_user(message)

# –ö–æ–º–∞–Ω–¥–∞ /registering
@bot.message_handler(commands=['registering'])
def register_user(message):
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id]:
        return
    user_states[user_id] = True
    current_user_reg[user_id] = True
    msgs_id = []
    msgs_id.append(user_id)
    msgs_id.append(message)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute(
        'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name varchar(25), number varchar(12), sex varchar(3), date_born varchar(10), ref_link varchar(7), chat_id varchar(10), user_id varchar(33), bonus INT NOT NULL, date_register varchar(10), my_referer varchar(33), count_checks INT NOT NULL, sum_checks INT NOT NULL, procent_my REAL NOT NULL, procent_ref REAL NOT NULL)')
    cur.execute(
        'CREATE TABLE IF NOT EXISTS bonuses (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INT NOT NULL, number INT NOT NULL, bonuses INT NOT NULL, count_day INT NOT NULL)')
    conn.commit()
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    for el in users:
        if str(user_id) == str(el[7]):
            msg = bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states[user_id] = False
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            cur.close()
            conn.close()
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –º–µ–Ω—é
            menu(message)
            return

    cur.close()
    conn.close()
    #–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–î–∞', callback_data='b_reg_yes')
    btn2 = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='b_reg_no')
    markup.add(btn1)
    markup.add(btn2)
    msg = bot.send_message(message.chat.id, '–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª *–¥—Ä—É–≥*?\n–£ –≤–∞—Å –µ—Å—Ç—å *–µ–≥–æ* *—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π* *–Ω–æ–º–µ—Ä*? ', parse_mode="Markdown", reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    user_states[user_id] = False
    # bot.register_next_step_handler(message, ref_link_accept)

# –ö–æ–º–∞–Ω–¥–∞ /menu
@bot.message_handler(commands=['menu'])
def menu(message):
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id]:
        return
    user_states[user_id] = True

    markup = types.InlineKeyboardMarkup()
    btn_bon = types.InlineKeyboardButton('üéÅ–ë–æ–Ω—É—Å—ãüéÅ', callback_data='user_bonus')
    btn_cont = types.InlineKeyboardButton('üìû–ö–æ–Ω—Ç–∞–∫—Ç—ãüìû', callback_data='contacts')
    btn_inst = types.InlineKeyboardButton('üì∏–ò–Ω—Å—Ç–∞–≥—Ä–∞–ºüì∏',
                                          url='https://www.instagram.com/kitsune.shemonaiha?igsh=NmpyZW9rcnVhMTUx')
    btn_menu = types.InlineKeyboardButton('üì±–ú–µ–Ω—éüì±', callback_data='kitchen_menu')
    btn_ref = types.InlineKeyboardButton('üí∞–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ãüí∞', callback_data='my_ref')
    btn_ans = types.InlineKeyboardButton('‚úèÔ∏è–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤‚úèÔ∏è', callback_data='send_request')
    btn_edit_user = types.InlineKeyboardButton('üìã–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüìã', callback_data='edit_profile')
    btn_queations = types.InlineKeyboardButton('‚ùì–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì', callback_data='queations')
    markup.add(btn_bon)
    markup.add(btn_cont, btn_inst)
    markup.add(btn_menu)
    markup.add(btn_ref)
    markup.add(btn_ans)
    markup.add(btn_edit_user)
    markup.add(btn_queations)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    isnumber = False
    for el in users:
        if str(user_id) == str(el[7]):
            isnumber = True

    if isnumber == False:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã(')
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup)
    cur.close()
    conn.close()

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = message.from_user.id
    user_states[user_id] = False

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ—Ñ
def ref_link_accept(message, call):
    usid = call.from_user.id
    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if call.data == 'b_reg_yes':
        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ: –û—Ç–º–µ–Ω–∞', reply_markup=markup)
        msgs_id.append(msg)
        bot.register_next_step_handler(message, ref_link_activate)
    elif call.data == 'b_reg_no':
        markup = types.ReplyKeyboardRemove()
        # –í–≤–æ–¥ –∏–º–µ–Ω–∏
        msg = bot.send_message(message.chat.id, '–¢–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', reply_markup=markup)
        msgs_id.append(msg)
        bot.register_next_step_handler(message, user_name)
    else:
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='–î–∞', callback_data='b_reg_yes')
        btn2 = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='b_reg_no')
        markup.add(btn1)
        markup.add(btn2)

        msg = bot.send_message(message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        msgs_id.append(msg)
        msg = bot.send_message(message.chat.id, '–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª *–¥—Ä—É–≥*?\n–£ –≤–∞—Å –µ—Å—Ç—å *–µ–≥–æ* *—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π* *–Ω–æ–º–µ—Ä*? ',
                               parse_mode="Markdown", reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
    user_msg.append(msgs_id)

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
def ref_link_activate(message, i = 1):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.content_type == 'text':
        number_link = message.text
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()

        isnumber = False
        user_id_referer = 0
        for el in users:
            if number_link == el[5]:
                id_referer = el[0]
                user_id_referer = el[7]
                isnumber = True
        if isnumber == True:
            conn.commit()
            cur.close()
            conn.close()


            msg = bot.send_message(message.chat.id, '–ë–æ–Ω—É—Å—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!')
            msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, user_name, True, user_id_referer)
        else:
            if message.text == '–û—Ç–º–µ–Ω–∞':
                msg = bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ —Ç–æ–≥–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
                msgs_id.append(msg)
                user_msg.append(msgs_id)
                bot.register_next_step_handler(message, user_name)
                return
            msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
            msgs_id.append(msg)
            if i < 15:
                msg = bot.send_message(message.chat.id, '–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –∏–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, —Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
                msgs_id.append(msg)
                i += 1
                user_msg.append(msgs_id)
                bot.register_next_step_handler(message, ref_link_activate, i)
            else:
                msg = bot.send_message(message.chat.id, '–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–æ–¥–∞.')
                msgs_id.append(msg)
                msg = bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –ª—É—á—à–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
                msgs_id.append(msg)
                user_msg.append(msgs_id)
                bot.register_next_step_handler(message, user_name)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        i += 1
        bot.register_next_step_handler(message, ref_link_activate, i)

# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_name(message, ref = False, id_ref = None):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if message.content_type == 'text':
        name = message.text
        if len(message.text) >= 25:
            msg = bot.send_message(message.chat.id, '–í–∞—à–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ')
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, user_name, ref, id_ref)
        else:
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            btn_send_nuber = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)
            markup.add(btn_send_nuber)

            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ',
                                   reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, user_number, name, ref, id_ref)
    else:
        msg = bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∏–º—è –µ—â—ë —Ä–∞–∑:')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, user_name, ref, id_ref)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
def accept_name(message, name, ref = False, id_ref = None):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    btn_send_nuber = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)
    markup.add(btn_send_nuber)
    markup2 = types.ReplyKeyboardRemove()
    if message.text == '–î–∞':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, user_number, name, ref, id_ref)
    else:
        msg = bot.send_message(message.chat.id, '–í–∞—à–µ –∏–º—è?', reply_markup=markup2)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, user_name, ref, id_ref)

# –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_number(message, name, ref = False, id_ref = None):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.contact is not None:
        number = message.contact.phone_number

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        btn_sexM = types.KeyboardButton(text='–ú—É–∂')
        btn_sexJ = types.KeyboardButton(text='–ñ–µ–Ω')
        markup.add(btn_sexM)
        markup.add(btn_sexJ)
        msg = bot.send_message(message.chat.id, '–í–∞—à –ø–æ–ª?', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, user_sex, name, number, ref, id_ref)
    else:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        btn_send_nuber = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)
        markup.add(btn_send_nuber)

        msg = bot.send_message(message.chat.id, '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é.', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, user_number, name, ref, id_ref)

# –í–≤–æ–¥ —Å–µ–∫—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_sex(message, name, number, ref = False, id_ref = None):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    markup = types.ReplyKeyboardRemove()
    if message.text == '–ú—É–∂':
        sex = message.text
        msg = bot.send_message(message.chat.id,
                         '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è—é, —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –≤–∞—Å –∏ –≤—Ä—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏.\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]', reply_markup=markup)
        msgs_id.append(msg)
        bot.register_next_step_handler(message, user_date, name, number, sex, ref, id_ref)
    elif message.text == '–ñ–µ–Ω':
        sex = message.text
        msg = bot.send_message(message.chat.id,
                         '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è—é, —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –≤–∞—Å –∏ –≤—Ä—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏.\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]', reply_markup=markup)
        msgs_id.append(msg)
        bot.register_next_step_handler(message, user_date, name, number, sex, ref, id_ref)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        btn_sexM = types.KeyboardButton(text='–ú—É–∂')
        btn_sexJ = types.KeyboardButton(text='–ñ–µ–Ω')
        markup.add(btn_sexM)
        markup.add(btn_sexJ)

        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—é—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–ø—Å—Å... –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏', reply_markup=markup)
        msgs_id.append(msg)
        bot.register_next_step_handler(message, user_sex, name, number, ref, id_ref)
    user_msg.append(msgs_id)

# –í–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_date(message, name, number, sex, ref = False, id_ref = None):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.content_type == 'text':
        if len(message.text) == 10:
            i = 0
            user_dated = message.text.split('.')
            if len(user_dated) == 3:
                for date in user_dated:
                    for c in date:
                        if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9':
                            i += 1
            error = False
            if i == 8:
                #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                if (int(user_dated[1]) == 2 and int(user_dated[0]) > 28) or (int(user_dated[0]) == 0) or (int(user_dated[1]) == 0) or (int(user_dated[2]) == 0):
                    error = True
                if (int(user_dated[1]) == 1 and int(user_dated[0]) > 31) or (int(user_dated[1]) == 3 and int(user_dated[0]) > 31) or (int(user_dated[1]) == 5 and int(user_dated[0]) > 31) or (int(user_dated[1]) == 7 and int(user_dated[0]) > 31) or (int(user_dated[1]) == 8 and int(user_dated[0]) > 31) or (int(user_dated[1]) == 10 and int(user_dated[0]) > 31) or (int(user_dated[1]) == 12 and int(user_dated[0]) > 31):
                    error = True
                if (int(user_dated[1]) == 4 and int(user_dated[0]) > 30) or (int(user_dated[1]) == 6 and int(user_dated[0]) > 30) or (int(user_dated[1]) == 9 and int(user_dated[0]) > 30) or (int(user_dated[1]) == 11 and int(user_dated[0]) > 30):
                    error = True
                if int(user_dated [1]) > 12:
                    error = True


            if i == 8 and error == False:
                date = datetime.strptime(message.text, '%d.%m.%Y').date()
                if date.year >= datetime.now().date().year - 6:
                    msg = bot.send_message(message.chat.id, '–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 6 –ª–µ—Ç.')
                    msgs_id.append(msg)

                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    user_id = message.from_user.id
                    user_states[user_id] = False
                    bot.register_next_step_handler(message, user_date, name, number, sex, ref, id_ref)
                    return
                user_create_ac(message, name, number, sex, date, ref, id_ref)
                #bot.register_next_step_handler(message, user_create_ac, name, number, sex, date)
            else:
                msg = bot.send_message(message.chat.id,
                                     '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è—é –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]')
                msgs_id.append(msg)
                bot.register_next_step_handler(message, user_date, name, number, sex, ref, id_ref)
        else:
            msg = bot.send_message(message.chat.id,
                             '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è—é –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, user_date, name, number, sex, ref, id_ref)
    else:
        msg = bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è—é –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, user_date, name, number, sex, ref, id_ref)
    user_msg.append(msgs_id)

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_create_ac (message, name, number, sex, date, ref = False, id_ref = None):
    usid = message.from_user.id
    for i in user_msg:
        if i != None and i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)

    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    ref_link = find_regenerate_link(generate_ref_link())

    date_reg = datetime.now().date()
    chat_id = message.chat.id
    user_id = message.from_user.id
    if ref == True:
        bonus = boneses_link
    else:
        bonus = 0

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if id_ref != None:
        cur.execute(f'UPDATE users SET bonus = bonus + {boneses_ref} WHERE user_id = {id_ref}')
        conn.commit()
    cur.execute("INSERT INTO users (name, number, sex, date_born, ref_link, chat_id, user_id, bonus, date_register, my_referer, count_checks, sum_checks, procent_my, procent_ref) VALUES ('%s', '%s', '%s','%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')" % (name, number, sex, date, ref_link, chat_id, user_id, bonus, date_reg, id_ref, 0, 0, procent_my, procent_ref))
    cur.execute(
        "INSERT INTO bonuses (user_id, number, bonuses, count_day) VALUES ('%s', '%s', '%s', '%s')" % (
            user_id, number, 0, 0))
    conn.commit()
    cur.close()
    conn.close()

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = message.from_user.id
    user_states[user_id] = False

    msg = bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    menu(message)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–∞–ª–æ–Ω–∞
def generate_ref_link(lenght = 7):
    all_symbols = string.digits
    result = ''.join(random.choice(all_symbols) for s in range(lenght))
    return result

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
def find_regenerate_link(ref_link):
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    isFound = False
    for el in users:
        if str(ref_link) == str(el[5]):
            isFound = True
    if isFound == True:
        bot.send_message(1028414646, '–ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ... –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞')
        ref_link = find_regenerate_link(generate_ref_link())
        bot.send_message(1028414646, f'–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {ref_link}')
        conn.commit()
        cur.close()
        conn.close()
        return ref_link
    else:
        conn.commit()
        cur.close()
        conn.close()
        return ref_link

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–æ–Ω—É—Å–∞—Ö –∏ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏
def send_bonuses_user(call):
    uscid = call.message.chat.id
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    for el in users:
        if str(uscid) == str(el[6]):
            msg = bot.send_message(call.message.chat.id, f'–í–∞—à–∏ –±–æ–Ω—É—Å—ã: {str(el[8])}\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {str(el[5])}')
            msgs_id.append(msg)
    cur.close()
    conn.close()
    user_msg.append(msgs_id)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_contact_user(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    msg = bot.send_message(call.message.chat.id, 'üì±–ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +77054816511\n–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —É–ª–∏—Ü–µ –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è 1–ë.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑, –∞ —Ç–∞–∫–∂–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É)')
    msgs_id.append(msg)
    user_msg.append(msgs_id)

# –û—Ç–∑—ã–≤ - –ü–æ–ª—É—á–µ–Ω–∏–µ
def send_request_user(call):
    usid = call.from_user.id

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
    markup.row(b_cancel)

    msg = bot.send_message(call.message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –º—ã –ø—Ä–æ—á—Ç–µ–º –µ–≥–æ –≤ –±–ª–∏–∑–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, send_mess_to_admin)

# –û—Ç–∑—ã–≤ - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
def send_mess_to_admin(message):
    user_id = message.from_user.id
    for i in user_msg:
        if i[0] == user_id:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(user_id)
    msgs_id.append(message)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    markup = types.ReplyKeyboardRemove()

    if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        msg = bot.send_message(message.chat.id, '–û—Ç–∑—ã–≤ –Ω–µ –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω.', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)

        user_states[user_id] = False
        return

    for el in users:
        if str(user_id) == str(el[7]):
            for i in admins:
                bot.forward_message(i, message.chat.id, message.message_id)
                bot.send_message(i,
                                 f'–ò–º—è —ç—Ç–æ–≥–æ –ø–æ–¥–æ–Ω–∫–∞: {el[1]}\n–ù–æ–º–µ—Ä —ç—Ç–æ–≥–æ —É–±–ª—é–¥–∫–∞: {el[2]}')
    msg = bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    cur.close()
    conn.close()

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states[user_id] = False

def my_ref(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    info = '–£ –≤–∞—Å '
    infob = ''
    n = 0
    ref_number = ''
    for el in users:
        if str(call.from_user.id) == str(el[10]):
            infob += f'{el[1]}, '
            n += 1
        if str(call.message.chat.id) == str(el[6]):
            ref_number += str(el[5])
    if n == 0:
        msg = bot.send_message(call.message.chat.id, f'–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞. –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ–º—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä {ref_number}.')
        msgs_id.append(msg)
    else:
        info += str(n) + ' —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n' + infob + f'\n–í–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 1% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –í–∞—à –Ω–æ–º–µ—Ä: {ref_number}'
        msg = bot.send_message(call.message.chat.id, info)
        msgs_id.append(msg)
    user_msg.append(msgs_id)

# –ò–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def info_user(call):
    usid = call.from_user.id
    for i in user_msg:
        if i != None and i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()


    for el in users:
        if str(usid) == str(el[7]):
            msg = bot.send_message(call.message.chat.id, f"–í–∞—à–µ –∏–º—è {str(el[1])}\n–ù–æ–º–µ—Ä: {str(el[2])}\n–í–∞—à –ø–æ–ª: {str(el[3])}\n–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {str(el[4])}\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {str(el[5])}\n–í–∞—à–∏ –±–æ–Ω—É—Å—ã: {str(el[8])}")
            msgs_id.append(msg)

    cur.close()
    conn.close()
    user_msg.append(msgs_id)

# –°–º–µ–Ω–∞ –ø–æ–ª–∞ (–≤–∏–Ω–¥—ã)
def res(call):
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id in user_states and user_states[user_id]:
        return
    user_states[user_id] = True

    for i in user_msg:
        if i!= None and i[0] == user_id:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(user_id)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    b_yes = types.KeyboardButton('–ú—É–∂')
    b_n = types.KeyboardButton('–ñ–µ–Ω')
    markup.add(b_yes, b_n)

    for el in users:
        if str(call.message.chat.id) == str(el[6]):
            msg = bot.send_message(call.message.chat.id, f'–ù—ã–Ω–µ—à–Ω–∏–π –ø–æ–ª: {el[3]}\n–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –ø–æ–ª', reply_markup=markup)
            msgs_id.append(msg)

    cur.close()
    conn.close()
    user_msg.append(msgs_id)

    bot.register_next_step_handler(call.message, resex)
def resex(message):
    markup = types.ReplyKeyboardRemove()
    if message.text == '–ú—É–∂':
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    try:
                        bot.delete_message(message.chat.id, m.message_id)
                    except Exception as e:
                        print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)

        sex = message.text

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        cur.execute(f"UPDATE users SET sex = '%s' WHERE user_id = '%s'" % (sex, usid))
        conn.commit()
        cur.close()
        conn.close()

        msg = bot.send_message(message.chat.id, f'–í–∞—à –ø–æ–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
    elif message.text == '–ñ–µ–Ω':
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    bot.delete_message(message.chat.id, m.id)
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)

        sex = message.text

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        cur.execute(f"UPDATE users SET sex = '%s' WHERE user_id = '%s'" % (sex, usid))
        conn.commit()
        cur.close()
        conn.close()

        msg = bot.send_message(message.chat.id, f'–í–∞—à –ø–æ–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    bot.delete_message(message.chat.id, m.id)
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)

        msg = bot.send_message(message.chat.id, f'–í–∞—à –ø–æ–ª –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω–µ–Ω')

        msgs_id.append(msg)
        user_msg.append(msgs_id)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
    else:
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    bot.delete_message(message.chat.id, m.id)
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        btn_sexM = types.KeyboardButton(text='–ú—É–∂')
        btn_sexJ = types.KeyboardButton(text='–ñ–µ–Ω')
        markup.add(btn_sexM)
        markup.add(btn_sexJ)

        msg = bot.send_message(message.chat.id,
                         '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—é—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–ø—Å—Å... –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ (–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)',
                         reply_markup=markup)

        msgs_id.append(msg)
        user_msg.append(msgs_id)

# –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏
def ren(call):
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id in user_states and user_states[user_id]:
        return
    user_states[user_id] = True

    for i in user_msg:
        if i[0] == user_id:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(user_id)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    msg = None

    for el in users:
        if str(call.message.chat.id) == str(el[6]):
            msg = bot.send_message(call.message.chat.id, f'–ù—ã–Ω–µ—à–Ω–µ–µ –∏–º—è: {el[1]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è')


    cur.close()
    conn.close()
    if msg != None:
        msgs_id.append(msg)
    user_msg.append(msgs_id)

    bot.register_next_step_handler(call.message, rename)
def rename(message):
    usid = message.from_user.id
    for i in user_msg:
        if i != None and i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.content_type == 'text':
        id = message.from_user.id
        name_new = message.text

        if len(message.text) >= 25:
            msg = bot.send_message(message.chat.id, '–í–∞—à–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ')
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, rename)
        elif message.text == '–û—Ç–º–µ–Ω–∞':
            msg = bot.send_message(message.chat.id, f'–í–∞—à–µ –∏–º—è –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ')
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states[usid] = False
        else:
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('ClientsBase.kts')
            cur = conn.cursor()
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            cur.execute(f"UPDATE users SET name = '%s' WHERE user_id = '%s'" % (name_new, id))
            conn.commit()
            cur.close()
            conn.close()

            msg = bot.send_message(message.chat.id, f'–í–∞—à–µ –∏–º—è –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {name_new}')
            msgs_id.append(msg)
            user_msg.append(msgs_id)

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states[usid] = False
    else:
        msg = bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∏–º—è –µ—â—ë —Ä–∞–∑.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
        msgs_id.append(msg)
        user_msg.append(msgs_id)

        bot.register_next_step_handler(message, rename)

# –°–º–µ–Ω–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def red(call):
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id in user_states and user_states[user_id]:
        return
    user_states[user_id] = True

    for i in user_msg:
        if i != None and i[0] == user_id:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(user_id)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    date_old = None
    for el in users:
        if str(call.message.chat.id) == str(el[6]):
            date_old = el[4].split('-')

            msg = bot.send_message(call.message.chat.id, f'–ù—ã–Ω–µ—à–Ω—è—è –¥–∞—Ç–∞: {date_old[2]}.{date_old[1]}.{date_old[0]}\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]')
            msgs_id.append(msg)
    cur.close()
    conn.close()

    user_msg.append(msgs_id)

    bot.register_next_step_handler(call.message, redate_born)
def redate_born(message):
    usid = message.from_user.id
    for i in user_msg:
        if i != None and i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.content_type == 'text':
        if len(message.text) == 10:
            i = 0
            user_dated = message.text.split('.')
            if len(user_dated) == 3:
                for date in user_dated:
                    for c in date:
                        if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9':
                            i += 1
            error = False
            if i == 8:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                if (int(user_dated[1]) == 2 and int(user_dated[0]) > 28) or (int(user_dated[0]) == 0) or (
                        int(user_dated[1]) == 0) or (int(user_dated[2]) == 0):
                    error = True
                if (int(user_dated[1]) == 1 and int(user_dated[0]) > 31) or (
                        int(user_dated[1]) == 3 and int(user_dated[0]) > 31) or (
                        int(user_dated[1]) == 5 and int(user_dated[0]) > 31) or (
                        int(user_dated[1]) == 7 and int(user_dated[0]) > 31) or (
                        int(user_dated[1]) == 8 and int(user_dated[0]) > 31) or (
                        int(user_dated[1]) == 10 and int(user_dated[0]) > 31) or (
                        int(user_dated[1]) == 12 and int(user_dated[0]) > 31):
                    error = True
                if (int(user_dated[1]) == 4 and int(user_dated[0]) > 30) or (
                        int(user_dated[1]) == 6 and int(user_dated[0]) > 30) or (
                        int(user_dated[1]) == 9 and int(user_dated[0]) > 30) or (
                        int(user_dated[1]) == 11 and int(user_dated[0]) > 30):
                    error = True
                if int(user_dated[1]) > 12:
                    error = True

            if i == 8 and error == False:
                date = datetime.strptime(message.text, '%d.%m.%Y').date()
                if date.year >= datetime.now().date().year - 6:
                    msg = bot.send_message(message.chat.id, '–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 6 –ª–µ—Ç.')
                    msgs_id.append(msg)



                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    user_states[usid] = False
                    return

                # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect('ClientsBase.kts')
                cur = conn.cursor()
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                cur.execute(f"UPDATE users SET date_born = '%s' WHERE user_id = '%s'" % (date, usid))
                conn.commit()
                cur.close()
                conn.close()

                msg = bot.send_message(message.chat.id, f'–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
                msgs_id.append(msg)


                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                user_states[usid] = False
            else:
                msg = bot.send_message(message.chat.id,
                                 '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è—é –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
                msgs_id.append(msg)

                bot.register_next_step_handler(message, redate_born)
        elif message.text == '–û—Ç–º–µ–Ω–∞':
            msg = bot.send_message(message.chat.id, '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.')
            msgs_id.append(msg)
            user_states[usid] = False
        else:
            msg = bot.send_message(message.chat.id,
                             '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è—é –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, redate_born)
    else:
        msg = bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è—é –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, redate_born)
    user_msg.append(msgs_id)

# –ö–æ–º–∞–Ω–¥–∞ /clients
@bot.message_handler(commands=['clients'])
def base_data_clients(message):
    chat_id = None
    for ad in admins:
        if message.chat.id == ad:
            chat_id = ad
    if chat_id != None:
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()

        info = ''
        for el in users:
            info += f'*ID:* {el[0]} –ò–º—è: {el[1]} *–ù–æ–º–µ—Ä:* {el[2]} –ü–æ–ª: {el[3]} –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]} –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {el[5]} CHAT ID: {el[6]} USER ID: {el[7]} –ë–æ–Ω—É—Å—ã: {el[8]} –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏; {el[9]} –†–µ—Ñ–µ—Ä–µ—Ä: {el[10]} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]} –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ï–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç: {el[13]}, –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {el[14]}\n'

        send_long_message(message.chat.id, info, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, f'–í–∞—à –∫–æ–¥ {message.chat.id}')

def send_long_message(chat_id, text, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown."""
    max_length = 4096

    def safe_split(text, max_length):
        parts = []
        while len(text) > max_length:
            # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ –ø–µ—Ä–µ–¥ max_length
            split_pos = max_length
            while split_pos > 0 and not re.match(r'[\s\n]', text[split_pos]):
                split_pos -= 1
            if split_pos == 0:
                split_pos = max_length
            parts.append(text[:split_pos])
            text = text[split_pos:]
        parts.append(text)
        return parts

    parts = safe_split(text, max_length)

    for part in parts:
        bot.send_message(chat_id, part, parse_mode=parse_mode)


# –ö–æ–º–∞–Ω–¥–∞ /timer
@bot.message_handler(commands=['timer'])
def base_bonuses_clients(message):
    chat_id = None
    for ad in admins:
        if message.chat.id == ad:
            chat_id = ad
    if chat_id != None:
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute('SELECT * FROM bonuses')
        bonuses_list = cur.fetchall()

        info = ''
        for el in bonuses_list:
            info += f'ID: {el[0]} USID: {el[1]} –ù–æ–º–µ—Ä: {el[2]} –ë–æ–Ω—É—Å—ã: {el[3]} –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π: {el[4]}\n'

        if len(info) >= 4096:
            for i in range(0, len(info), 4096):
                bot.send_message(message.chat.id, str(info[i:i + 4096]))
        else:
            bot.send_message(message.chat.id, info)
    else:
        bot.send_message(message.chat.id, f'–í–∞—à –∫–æ–¥ {message.chat.id}')

# –ö–æ–º–∞–Ω–¥–∞ /orders
@bot.message_handler(commands=['orders'])
def base_date_orders(message):
    chat_id = None
    for ad in admins:
        if message.chat.id == ad:
            chat_id = ad
    if chat_id != None:
        # –ü–æ–¥–∫–ª—é—á–∞—é –±–∏–±–ª–µ–æ—Ç–µ–∫—É —á–µ–∫–æ–≤
        conn = sqlite3.connect('OrdersBase.kts')
        cur = conn.cursor()
        cur.execute('SELECT * FROM orders')
        orders = cur.fetchall()

        for el in orders:
            bot.send_message(message.chat.id,
                             f'ID: {el[0]}, –ö—Ç–æ –∑–∞–∫–∞–∑–∞–ª: {el[1]}, –°—É–º–º–∞ —á–µ–∫–∞: {el[2]}, –¢–µ–Ω–≥–µ: {el[3]}, –ë–æ–Ω—É—Å–∞–º–∏: {el[4]}, –î–∞—Ç–∞: {el[5]}, –í—Ä–µ–º—è: {el[6]}')
        cur.close()
        conn.close()
    else:
        bot.send_message(message.chat.id, f'–í–∞—à –∫–æ–¥ {message.chat.id}')


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
def foo():
    while True:
        send_mess_date_born()
        time.sleep(1)
# -----------------------------------------------------------------------------
def send_mess_date_born():
    Date_Now = datetime.now() + timedelta(hours=5)
    date_now = Date_Now.date()
    time_now = Date_Now.time()
    if str(time_now)[:9] == '12:00:00.000000'[:9]:
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()

        cur.execute('SELECT * FROM users')
        users = cur.fetchall()
        cur.execute('SELECT * FROM bonuses')
        bonuses_list = cur.fetchall()

        for el in users:
            if str(el[4])[4:] == str(date_now)[4:]:
                bot.send_message(int(el[6]), '–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!!!\n–°–µ–≥–æ–¥–Ω—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–º–ø—É—Ä—É —Å –∫—É—Ä–∏—Ü–µ–π –≤ –ø–æ–¥–∞—Ä–æ–∫!\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ)')
            for i in bonuses_list:
                if str(el[7]) == str(i[1]) and int(i[3]) < count_days_mess:  # –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞—à –¥–µ–Ω—å
                    cur.execute(f"UPDATE bonuses SET count_day = count_day + {1} WHERE number = {i[2]}"
                                )
                    conn.commit()
                elif str(el[7]) == str(i[1]) and int(i[3]) == count_days_mess:  # 40
                    cur.execute(f"UPDATE bonuses SET count_day = count_day + {1} WHERE number = {i[2]}"
                                )
                    cur.execute(f"UPDATE bonuses SET bonuses = bonuses + {count_bonus_timed} WHERE number = {i[2]}"
                                )
                    cur.execute(f'UPDATE users SET bonus = bonus + {count_bonus_timed} WHERE number = {el[2]}')
                    conn.commit()
                    bot.send_message(int(el[6]),
                                     f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {el[1]}!\n–ú—ã –¥–∞—Ä–∏–º –≤–∞–º {count_bonus_timed} –±–æ–Ω—É—Å–æ–≤. –£—Å–ø–µ–π—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å)')
                elif str(el[7]) == str(i[1]) and int(i[3]) <= (count_days_mess + count_days_mess_out):
                    cur.execute(f"UPDATE bonuses SET count_day = count_day + {1} WHERE number = {i[2]}"
                                )
                    conn.commit()
                elif str(el[7]) == str(i[1]) and int(i[3]) > (count_days_mess + count_days_mess_out):
                    cur.execute(f"UPDATE bonuses SET count_day = {0} WHERE number = {i[2]}"
                                )
                    cur.execute(f"UPDATE bonuses SET bonuses = bonuses - {count_bonus_timed} WHERE number = {i[2]}"
                                )
                    cur.execute(f'UPDATE users SET bonus = bonus - {count_bonus_timed} WHERE number = {el[2]}')
                    conn.commit()
        cur.close()
        conn.close()
# -----------------------------------------------------------------------------

#–î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
@bot.message_handler(commands=['work'])
def work(message):
    chat_id = None
    for ad in works:
        if message.chat.id == ad:
            chat_id = ad
    if chat_id != None:
        markup = types.InlineKeyboardMarkup()
        b_newcheck = types.InlineKeyboardButton('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='new_check')
        b_delcheck = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='del_check')
        b_info_client = types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ', callback_data='info_client')
        b_end = types.InlineKeyboardButton('–ò—Ç–æ–≥ –¥–Ω—è', callback_data='end_day')
        markup.add(b_newcheck)
        markup.add(b_delcheck)
        markup.add(b_info_client)
        markup.add(b_end)

        bot.send_message(chat_id, '–í—ã –≤–æ—à–ª–∏ –≤ —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç!', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f'–í–∞—à –∫–æ–¥ {message.chat.id}')

def new_check(call):
    user_id = call.from_user.id
    if user_id in user_states and user_states[user_id]:
        return
    user_states[user_id] = True

    for i in user_msg:
        if i and i[0] == user_id:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(user_id)

    # –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ó–∞–∫–∞–∑–æ–≤
    conn = sqlite3.connect('OrdersBase.kts')
    cur = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute(
        'CREATE TABLE IF NOT EXISTS orders (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id varchar(33), sum_check INT NOT NULL, sum_in_tenge INT NOT NULL, sum_bonus INT NOT NULL, date_check varchar(10), time_check varchar(20))')
    conn.commit()

    msg = bot.send_message(call.message.chat.id,
                     '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ç–æ–≤—ã–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n7 (—Ö—Ö—Ö) —Ö—Ö—Ö —Ö—Ö —Ö—Ö\n–ü–ª—é—Å–∏–∫ –Ω–µ –Ω—É–∂–Ω–æ!\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, register_bonus_number)
def register_bonus_number(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.content_type == 'text':
        number = message.text
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()

        isnumber = False
        my_ref = None
        client_bonus = 0
        user = []
        for el in users:
            if number == el[2]:
                my_ref = el[10]
                client_bonus = el[8]
                isnumber = True
                user = el
        if isnumber == True:
            msg = bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω! –£ –∫–ª–∏–µ–Ω—Ç–∞ {user[11]} –∑–∞–∫–∞–∑–æ–≤ –∏ {client_bonus} –±–æ–Ω—É—Å–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, sum_check, number, my_ref)
        elif message.text == '–û—Ç–º–µ–Ω–∞':
            msg = bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –ù–æ–≤—ã–π —á–µ–∫')
            msgs_id.append(msg)

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states[usid] = False
            user_msg.append(msgs_id)
            return
        else:
            msg = bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω( –∏ –∫–∞–º–µ–Ω—å —è –Ω–µ –¥–∞–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                             '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ç–æ–≤—ã–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n7 (—Ö—Ö—Ö) —Ö—Ö—Ö —Ö—Ö —Ö—Ö\n–ü–ª—é—Å–∏–∫ –Ω–µ –Ω—É–∂–Ω–æ!\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, register_bonus_number)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        msgs_id.append(msg)
        msg = bot.send_message(message.chat.id,
                         '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ç–æ–≤—ã–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n7 (—Ö—Ö—Ö) —Ö—Ö—Ö —Ö—Ö —Ö—Ö\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, register_bonus_number)
    user_msg.append(msgs_id)

def need_to_bonus(message, sum, number, my_ref):
    markup = types.ReplyKeyboardRemove()
    if message.text == '–î–∞':
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    try:
                        bot.delete_message(message.chat.id, m.message_id)
                    except Exception as e:
                        print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)

        msg = bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—Å–µ, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –í—Å–µ', reply_markup=markup)
        msgs_id.append(msg)

        bot.register_next_step_handler(message, relize_check, sum, number, my_ref, True)

        user_msg.append(msgs_id)
    elif message.text == '–ù–µ—Ç':
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    bot.delete_message(message.chat.id, m.id)
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)
        msg = bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ–∫–∞', reply_markup=markup)
        relize_check(message, sum, number, my_ref)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    bot.delete_message(message.chat.id, m.id)
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)
        msg = bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –ù–æ–≤—ã–π —á–µ–∫', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    else:
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    bot.delete_message(message.chat.id, m.id)
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        btn_sexM = types.KeyboardButton(text='–î–∞')
        btn_sexJ = types.KeyboardButton(text='–ù–µ—Ç')
        markup.add(btn_sexM)
        markup.add(btn_sexJ)

        msg = bot.send_message(message.chat.id,
                               '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—é—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–ø—Å—Å... –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ (–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)',
                               reply_markup=markup)

        msgs_id.append(msg)
        user_msg.append(msgs_id)


def sum_check(message, number, my_ref):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.content_type == 'text':
        isCheckTrue = any(character.isdigit() for character in message.text)
        if isCheckTrue == True:
            sum = int(message.text)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            b_y = types.KeyboardButton('–î–∞')
            b_n = types.KeyboardButton('–ù–µ—Ç')
            markup.add(b_y)
            markup.add(b_n)

            msg = bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã?', reply_markup=markup)
            msgs_id.append(msg)
            bot.register_next_step_handler(message, need_to_bonus, sum, number, my_ref)




        elif message.text == '–û—Ç–º–µ–Ω–∞':
            msg = bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –ù–æ–≤—ã–π —á–µ–∫')
            msgs_id.append(msg)

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states[usid] = False
            user_msg.append(msgs_id)
            return
        else:
            msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—ã –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ï—â—ë —è –¥—É–º–∞—é –≤—ã –Ω–µ–¥–∞–ª–µ–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω—ã')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, sum_check, number, my_ref)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—ã –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω—ã')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, sum_check, number, my_ref)

    user_msg.append(msgs_id)

def relize_check(message, sum, number, my_ref, y_b = False):
    if y_b == True:
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    bot.delete_message(message.chat.id, m.id)
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msgs_id.append(message)
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()
        client_id = None
        client_sum_checks = None
        chat_id = None
        chat_id_ref = None
        percent_us = None
        percent_ref = None
        client_bonus = 0
        for el in users:
            if number == el[2]:
                client_bonus = el[8]
                client_id = el[7]
                chat_id = el[6]
                percent_us = el[13]
                client_sum_checks = el[12]
            if str(my_ref) == str(el[7]):
                chat_id_ref = el[6]
                percent_ref = el[14]
        user = cur.execute(f'SELECT * FROM users WHERE user_id = {client_id}').fetchone()
        if check_sum_if2 <= user[12] < check_sum_if3 and user[13] != procent_my2:
            cur.execute(f"UPDATE users SET procent_my = {procent_my2} WHERE user_id = {client_id}")
            conn.commit()
            bot.send_message(chat_id, '–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–æ–≤ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
            percent_us = procent_my2
        elif check_sum_if3 <= user[12] < check_sum_if4 and user[13] != procent_my3:
            cur.execute(f"UPDATE users SET procent_my = {procent_my3} WHERE user_id = {client_id}")
            conn.commit()
            bot.send_message(chat_id, '–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–æ–≤ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
            percent_us = procent_my3
        elif check_sum_if4 <= user[12] and user[13] != procent_my4:
            cur.execute(f"UPDATE users SET procent_my = {procent_my4} WHERE user_id = {client_id}")
            conn.commit()
            bot.send_message(chat_id, '–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–æ–≤ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
            percent_us = procent_my4
        isCheckTrue = any(character.isdigit() for character in message.text)
        if message.text == '–í—Å–µ':
            if client_bonus >= sum:
                bonus_minus = sum
            elif client_bonus <= 0:
                bonus_minus = 0
            else:
                bonus_minus = client_bonus
            cur.execute(f'UPDATE users SET bonus = bonus - {bonus_minus} WHERE number = {number}')
            sun_tenge = int(sum - bonus_minus)
            boneses = int(sun_tenge * percent_us)  # –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∫–∏
            bot.send_message(chat_id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ {sum}—Ç–≥ –∏ –ø–æ–ª—É—á–∏–ª–∏ {boneses} –±–æ–Ω—É—Å–æ–≤')

            cur.execute(f'UPDATE users SET bonus = bonus + {boneses} WHERE number = {number}')
            cur.execute(f'UPDATE users SET count_checks = count_checks + {1} WHERE number = {number}')
            cur.execute(f'UPDATE users SET sum_checks = sum_checks + {sum} WHERE number = {number}')
            conn.commit()

            info = cur.execute('SELECT * FROM bonuses WHERE number=?', (number, )).fetchone()
            if info[3] > 0:
                cur.execute(f"UPDATE bonuses SET count_day = {0} WHERE number = {info[2]}")
                if bonus_minus >= count_bonus_timed:
                    cur.execute(f"UPDATE bonuses SET bonuses = {0} WHERE number = {info[2]}")
                else:
                    cur.execute(f"UPDATE bonuses SET bonuses = bonuses - {bonus_minus} WHERE number = {info[2]}")
            else:
                cur.execute(f"UPDATE bonuses SET count_day = {0} WHERE number = {info[2]}")

            if my_ref != 'None':
                bonus_ref = int(sun_tenge * percent_ref)  # –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∫–∏
                if bonus_ref != 0:
                    bot.send_message(chat_id_ref, f'–í–∞—à –¥—Ä—É–≥, —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É. –í–∞–º –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã {bonus_ref}')
                cur.execute(f'UPDATE users SET bonus = bonus + {bonus_ref} WHERE user_id = {my_ref}')
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            conn2 = sqlite3.connect('OrdersBase.kts')
            cur2 = conn2.cursor()
            Date_Now = datetime.now() + timedelta(hours=5)
            date_order = Date_Now.date()
            time_order = Date_Now.time()
            cur2.execute("INSERT INTO orders (user_id, sum_check, sum_in_tenge, sum_bonus, date_check, time_check) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')" % (client_id, sum, sun_tenge, bonus_minus, date_order, time_order))
            conn2.commit()
            cur2.close()
            conn2.close()

            info = ''
            for el in users:
                if number == el[2] or my_ref == el[7]:
                    info += f'ID: {el[0]} –ò–º—è: {el[1]} –ù–æ–º–µ—Ä: {el[2]} –ë–æ–Ω—É—Å—ã: {el[8]}\n'

            msg = bot.send_message(message.chat.id, info)
            msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞!')
            msgs_id.append(msg)
            user_states[usid] = False
        elif isCheckTrue:
            if int(message.text) > client_bonus:
                msg = bot.send_message(message.chat.id, '–£ –∫–ª–µ–Ω—Ç–∞ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
                msgs_id.append(msg)
                bot.register_next_step_handler(message, relize_check, sum, number, my_ref, True)
            else:
                bonus_minus = int(message.text)
                cur.execute(f'UPDATE users SET bonus = bonus - {bonus_minus} WHERE number = {number}')
                sun_tenge = int(sum - bonus_minus)
                boneses = int(sun_tenge * percent_us)  # –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∫–∏

                bot.send_message(chat_id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ {sum}—Ç–≥ –∏ –ø–æ–ª—É—á–∏–ª–∏ {boneses} –±–æ–Ω—É—Å–æ–≤')
                cur.execute(f'UPDATE users SET bonus = bonus + {boneses} WHERE number = {number}')
                cur.execute(f'UPDATE users SET count_checks = count_checks + {1} WHERE number = {number}')
                cur.execute(f'UPDATE users SET sum_checks = sum_checks + {sum} WHERE number = {number}')
                conn.commit()

                info = cur.execute('SELECT * FROM bonuses WHERE number=?', (number,)).fetchone()
                if info[3] > 0:
                    cur.execute(f"UPDATE bonuses SET count_day = {0} WHERE number = {info[2]}")
                    if bonus_minus >= count_bonus_timed:
                        cur.execute(f"UPDATE bonuses SET bonuses = {0} WHERE number = {info[2]}")
                    else:
                        cur.execute(f"UPDATE bonuses SET bonuses = bonuses - {bonus_minus} WHERE number = {info[2]}")
                else:
                    cur.execute(f"UPDATE bonuses SET count_day = {0} WHERE number = {info[2]}")

                if my_ref != 'None':
                    bonus_ref = int(sun_tenge * percent_ref)  # –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∫–∏
                    if bonus_ref != 0:
                        bot.send_message(chat_id_ref,
                                     f'–í–∞—à –¥—Ä—É–≥, —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É. –í–∞–º –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã {bonus_ref}')
                    cur.execute(f'UPDATE users SET bonus = bonus + {bonus_ref} WHERE user_id = {my_ref}')
                cur.execute('SELECT * FROM users')
                users = cur.fetchall()

                conn2 = sqlite3.connect('OrdersBase.kts')
                cur2 = conn2.cursor()
                Date_Now = datetime.now() + timedelta(hours=5)
                date_order = Date_Now.date()
                time_order = Date_Now.time()
                cur2.execute(
                    "INSERT INTO orders (user_id, sum_check, sum_in_tenge, sum_bonus, date_check, time_check) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')" % (
                    client_id, sum, sun_tenge, bonus_minus, date_order, time_order))
                conn2.commit()
                cur2.close()
                conn2.close()

                info = ''
                for el in users:
                    if number == el[2] or my_ref == el[7]:
                        info += f'ID: {el[0]} –ò–º—è: {el[1]} –ù–æ–º–µ—Ä: {el[2]} –ë–æ–Ω—É—Å—ã: {el[8]}\n'

                msg = bot.send_message(message.chat.id, info)
                msgs_id.append(msg)
                msg = bot.send_message(message.chat.id, '–°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞!')
                msgs_id.append(msg)
                user_states[usid] = False

        elif message.text == '–û—Ç–º–µ–Ω–∞':
            msg = bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –ù–æ–≤—ã–π —á–µ–∫')
            msgs_id.append(msg)

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states[usid] = False
            user_msg.append(msgs_id)
            conn.commit()
            cur.close()
            conn.close()
            return
        else:
            msg = bot.send_message(message.chat.id,
                                   '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—ã –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ï—â—ë —è –¥—É–º–∞—é –≤—ã –Ω–µ–¥–∞–ª–µ–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω—ã')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, relize_check, sum, number, my_ref, True)
        conn.commit()
        cur.close()
        conn.close()

        user_msg.append(msgs_id)
    else:
        usid = message.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    bot.delete_message(message.chat.id, m.id)
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()
        client_id = None
        chat_id = None
        chat_id_ref = None
        percent_us = None
        percent_ref = None
        for el in users:
            if number == el[2]:
                client_id = el[7]
                chat_id = el[6]
                percent_us = el[13]
            if str(my_ref) == str(el[7]):
                chat_id_ref = el[6]
                percent_ref = el[14]
        user = cur.execute(f'SELECT * FROM users WHERE user_id = {client_id}').fetchone()
        if check_sum_if2 <= user[12] < check_sum_if3 and user[13] != procent_my2:
            cur.execute(f"UPDATE users SET procent_my = {procent_my2} WHERE user_id = {client_id}")
            conn.commit()
            bot.send_message(chat_id, '–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–æ–≤ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
            percent_us = procent_my2
        elif check_sum_if3 <= user[12] < check_sum_if4 and user[13] != procent_my3:
            cur.execute(f"UPDATE users SET procent_my = {procent_my3} WHERE user_id = {client_id}")
            conn.commit()
            bot.send_message(chat_id, '–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–æ–≤ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
            percent_us = procent_my3
        elif check_sum_if4 <= user[12] and user[13] != procent_my4:
            cur.execute(f"UPDATE users SET procent_my = {procent_my4} WHERE user_id = {client_id}")
            conn.commit()
            bot.send_message(chat_id, '–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–æ–≤ –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
            percent_us = procent_my4
        boneses = int(sum * percent_us)  # –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∫–∏

        bot.send_message(chat_id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ {sum}—Ç–≥ –∏ –ø–æ–ª—É—á–∏–ª–∏ {boneses} –±–æ–Ω—É—Å–æ–≤')
        cur.execute(f'UPDATE users SET bonus = bonus + {boneses} WHERE number = {number}')
        cur.execute(f'UPDATE users SET count_checks = count_checks + {1} WHERE number = {number}')
        cur.execute(f'UPDATE users SET sum_checks = sum_checks + {sum} WHERE number = {number}')
        conn.commit()

        try:
            info = cur.execute('SELECT * FROM bonuses WHERE number=?', (number,)).fetchone()
            if info[3] > 0:
                cur.execute(f"UPDATE bonuses SET count_day = {0} WHERE number = {info[2]}")
                cur.execute(f"UPDATE bonuses SET bonuses = {0} WHERE number = {info[2]}")
            else:
                cur.execute(f"UPDATE bonuses SET count_day = {0} WHERE number = {info[2]}")
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –†–µ–ª–∏–∑ —á–µ–∫ "–Ω–µ—Ç", –Ω–µ —Å–±—Ä–æ—Å–∏–ª —Ç–∞–π–º–µ—Ä –¥–Ω—è –∏ –Ω–µ —Å–ø–∏—Å–∞–ª –±–æ–Ω—É—Å—ã: {e}')
        
        if my_ref != 'None':
            bonus_ref = int(sum * percent_ref)  # –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∫–∏
            if bonus_ref != 0:
                bot.send_message(chat_id_ref,
                             f'–í–∞—à –¥—Ä—É–≥, —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É. –í–∞–º –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã {bonus_ref}')
            cur.execute(f'UPDATE users SET bonus = bonus + {bonus_ref} WHERE user_id = {my_ref}')

        for el in users:
            if number == el[2]:
                client_id = el[7]

        conn2 = sqlite3.connect('OrdersBase.kts')
        cur2 = conn2.cursor()
        Date_Now = datetime.now() + timedelta(hours=5)
        date_order = Date_Now.date()
        time_order = Date_Now.time()
        cur2.execute(
            "INSERT INTO orders (user_id, sum_check, sum_in_tenge, sum_bonus, date_check, time_check) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')" % (
                client_id, sum, sum, 0, date_order, time_order))
        conn.commit()
        conn2.commit()
        cur2.close()
        conn2.close()

        cur.execute('SELECT * FROM users')
        users = cur.fetchall()
        info = ''
        for el in users:
            if number == el[2] or my_ref == el[7]:
                info += f'ID: {el[0]} –ò–º—è: {el[1]} –ù–æ–º–µ—Ä: {el[2]} –ë–æ–Ω—É—Å—ã: {el[8]}\n'

        msg = bot.send_message(message.chat.id, info)
        msgs_id.append(msg)

        conn.commit()
        cur.close()
        conn.close()

        msg = bot.send_message(message.chat.id, '–°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞!')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        user_states[usid] = False

def del_check(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    b_sum_check = types.KeyboardButton('–°—É–º–º–∞ —á–µ–∫–∞')
    b_date_check = types.KeyboardButton('–ü–æ –¥–∞—Ç–µ')
    b_cancel = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.add(b_sum_check)
    markup.add(b_date_check)
    markup.add(b_cancel)

    msg = bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ —á–µ–∫–∞', reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, find_check)

def find_check(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    markup = types.ReplyKeyboardRemove()

    if message.text == '–°—É–º–º–∞ —á–µ–∫–∞':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞:', reply_markup=markup)
        msgs_id.append(msg)
        bot.register_next_step_handler(message, find_sum_check)
    elif message.text == '–ü–æ –¥–∞—Ç–µ':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Çe —á–µ–∫–∞:\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å [–î–î.–ú–ú.–ì–ì–ì–ì]', reply_markup=markup)
        msgs_id.append(msg)
        bot.register_next_step_handler(message, find_data_check)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –£–¥–∞–ª–∏—Ç—å —á–µ–∫')
        msgs_id.append(msg)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    else:
        msg = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        msgs_id.append(msg)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        b_sum_check = types.KeyboardButton('–°—É–º–º–∞ —á–µ–∫–∞')
        b_date_check = types.KeyboardButton('–ü–æ –¥–∞—Ç–µ')
        b_cancel = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup.add(b_sum_check)
        markup.add(b_date_check)
        markup.add(b_cancel)

        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ —á–µ–∫–∞', reply_markup=markup)
        msgs_id.append(msg)
        bot.register_next_step_handler(message, find_check)
    user_msg.append(msgs_id)

def find_sum_check(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    isCheckTrue = any(character.isdigit() for character in message.text)
    if isCheckTrue:
        sum_check = int(message.text)

        conn = sqlite3.connect('OrdersBase.kts')
        cur = conn.cursor()
        cur.execute('SELECT * FROM orders')
        orders = cur.fetchall()
        info = ''
        for el in orders:
            if sum_check == el[2]:
                info += str(f'id –∑–∞–∫–∞–∑–∞: {el[0]}, –°—É–º–º–∞ —á–µ–∫–∞: {el[2]}, –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {el[5]}, –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {el[6]}\n')
        if len(info) >= 4096:
            for i in range(0, len(info), 4096):
                msg = bot.send_message(message.chat.id, str(info[i:i + 4096]))
                msgs_id.append(msg)
        else:
            if info == '':
                msg = bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                msgs_id.append(msg)
            else:
                msg = bot.send_message(message.chat.id, info)
                msgs_id.append(msg)
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞.\n–ù–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, delete_check_id)
        cur.close()
        conn.close()
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –£–¥–∞–ª–∏—Ç—å —á–µ–∫')
        msgs_id.append(msg)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    else:
        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, find_sum_check)
    user_msg.append(msgs_id)

def find_data_check(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if len(message.text) == 10 or message.text == '–°–µ–≥–æ–¥–Ω—è':
        i = 0
        user_dated = message.text.split('.')
        if len(user_dated) == 3:
            for date in user_dated:
                for c in date:
                    if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9':
                        i += 1
        error = False
        if i == 8:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            if (int(user_dated[1]) == 2 and int(user_dated[0]) > 28) or (int(user_dated[0]) == 0) or (
                    int(user_dated[1]) == 0) or (int(user_dated[2]) == 0):
                error = True
            if (int(user_dated[1]) == 1 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 3 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 5 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 7 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 8 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 10 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 12 and int(user_dated[0]) > 31):
                error = True
            if (int(user_dated[1]) == 4 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 6 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 9 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 11 and int(user_dated[0]) > 30):
                error = True
            if int(user_dated[1]) > 12:
                error = True

        if (i == 8 and error == False) or message.text == '–°–µ–≥–æ–¥–Ω—è':
            if message.text == '–°–µ–≥–æ–¥–Ω—è':
                date = datetime.now().date()
            else:
                date = datetime.strptime(message.text, '%d.%m.%Y').date()

            conn = sqlite3.connect('OrdersBase.kts')
            cur = conn.cursor()
            cur.execute('SELECT * FROM orders')
            orders = cur.fetchall()

            info = ''
            for el in orders:
                if str(date) == str(el[5]):
                    info += str(
                        f'id –∑–∞–∫–∞–∑–∞: {el[0]}, –°—É–º–º–∞ —á–µ–∫–∞: {el[2]}, –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {el[5]}, –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {el[6]}\n')
            if len(info) >= 4096:
                for i in range(0, len(info), 4096):
                    msg = bot.send_message(message.chat.id, str(info[i:i + 4096]))
                    msgs_id.append(msg)
            else:
                if info == '':
                    msg = bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                    msgs_id.append(msg)
                else:
                    msg = bot.send_message(message.chat.id, info)
                    msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞.\n–ù–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, delete_check_id)
            cur.close()
            conn.close()
        else:
            msg = bot.send_message(message.chat.id,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
            msgs_id.append(msg)

            bot.register_next_step_handler(message, find_data_check)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –£–¥–∞–ª–∏—Ç—å —á–µ–∫')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    else:
        msg = bot.send_message(message.chat.id,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, find_data_check)
    user_msg.append(msgs_id)

def delete_check_id(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    isCheckTrue = any(character.isdigit() for character in message.text)
    if isCheckTrue:
        id_check = int(message.text)

        conn2 = sqlite3.connect('ClientsBase.kts')
        cur2 = conn2.cursor()
        cur2.execute('SELECT * FROM users')
        users = cur2.fetchall()

        conn = sqlite3.connect('OrdersBase.kts')
        cur = conn.cursor()
        cur.execute('SELECT * FROM orders')
        orders = cur.fetchall()
        isFind = False
        sum_tenge = 0
        sum_bonus = 0
        _procent_my = 0.02
        _procent_ref = 0.01
        us_client = None
        my_ref = None
        for el in orders:
            if id_check == el[0]:
                sum_tenge = el[3]
                sum_bonus = el[4]
                us_client = el[1]
                isFind = True
        for el in users:
            if us_client == el[7]:
                my_ref = el[10]
                _procent_my = el[13]
        for el in users:
            if str(my_ref) == str(el[7]):
                _procent_ref = el[14]

        if isFind:
            boneses = int(sum_tenge * _procent_my)  # –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∫–∏
            bonus_ref = int(sum_tenge * _procent_ref)  # –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            sum_ = sum_bonus + sum_tenge
            cur2.execute(f'UPDATE users SET bonus = bonus - {boneses} WHERE user_id = {us_client}')
            cur2.execute(f'UPDATE users SET bonus = bonus + {sum_bonus} WHERE user_id = {us_client}')
            cur2.execute(f'UPDATE users SET count_checks = count_checks - {1} WHERE user_id = {us_client}')
            cur2.execute(f'UPDATE users SET sum_checks = sum_checks - {sum_} WHERE user_id = {us_client}')
            if my_ref != 'None':
                cur2.execute(f'UPDATE users SET bonus = bonus - {bonus_ref} WHERE user_id = {my_ref}')
            conn2.commit()
            cur2.close()
            conn2.close()

            cur.execute(f'DELETE FROM orders WHERE id = {id_check}')
            msg = bot.send_message(message.chat.id, '–ß–µ–∫ –±—ã–ª —É–¥–∞–ª–µ–Ω!')
            msgs_id.append(msg)
            conn.commit()
            cur.close()
            conn.close()

            user_states[usid] = False
            user_msg.append(msgs_id)
            return
        else:
            msg = bot.send_message(message.chat.id, '–ß–µ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, delete_check_id)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –£–¥–∞–ª–∏—Ç—å —á–µ–∫')
        msgs_id.append(msg)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    else:
        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, delete_check_id)
    user_msg.append(msgs_id)

def info_client(call):
    user_id = call.from_user.id
    if user_id in user_states and user_states[user_id]:
        return
    user_states[user_id] = True

    for i in user_msg:
        if i and i[0] == user_id:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(user_id)

    msg = bot.send_message(call.message.chat.id,
                           '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, info_client1)

def info_client1(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.content_type == 'text':
        number = message.text
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute('SELECT * FROM users')
        users = cur.fetchall()

        isnumber = False
        my_ref = None
        client_bonus = 0
        user = []
        for el in users:
            if number == el[2]:
                my_ref = el[10]
                client_bonus = el[8]
                isnumber = True
                user = el
        if isnumber == True:
            msg = bot.send_message(message.chat.id,
                                   f'–ù–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω!')
            msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, f'ID: {user[0]}, <b>–ò–º—è:</b> {user[1]}, <b>–ù–æ–º–µ—Ä:</b> {user[2]}, <b>–ü–æ–ª:</b> {user[3]}, <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user[4]}, <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {user[5]}, CHAT ID: {user[6]}, USER ID: {user[7]}, <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤:</b> {user[8]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[9]}, ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {user[10]}, <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤:</b> {user[11]}, <b>–°—É–º–º–∞ –≤—ã–∫—É–ø–∞:</b> {user[12]}, –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {user[13]}, –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∑–∞–∫–∞–∑–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[14]}\n–ï–≥–æ –∑–∞–∫–∞–∑—ã:', parse_mode='HTML')
            msgs_id.append(msg)

            conn2 = sqlite3.connect('OrdersBase.kts')
            cur2 = conn2.cursor()
            orders = cur2.execute(f"SELECT * FROM orders WHERE user_id = {user[7]}").fetchall()
            info = ''
            for el in orders:
                info += str(f'ID –∑–∞–∫–∞–∑–∞: {el[0]}, *–°—É–º–º–∞ —á–µ–∫–∞:* {el[2]}, *–°—É–º–º–∞ –≤ —Ç–µ–Ω–≥–µ:* {el[3]}, *–°—É–º–º–∞ –±–æ–Ω—É—Å–∞–º–∏:* {el[4]}, –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {el[5]}, –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {el[6]}\n')

            if info != '':
                send_long_message(message.chat.id, info, parse_mode="Markdown")
            else:
                msg = bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                msgs_id.append(msg)

            user_states[usid] = False

        elif message.text == '–û—Ç–º–µ–Ω–∞':
            msg = bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ')
            msgs_id.append(msg)

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states[usid] = False
            user_msg.append(msgs_id)
            return
        else:
            msg = bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω( –∏ –∫–∞–º–µ–Ω—å —è –Ω–µ –¥–∞–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, info_client1)
    else:
        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        msgs_id.append(msg)
        msg = bot.send_message(message.chat.id,
                               '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, info_client1)
    user_msg.append(msgs_id)

def end_day(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    date = datetime.now().date()

    conn = sqlite3.connect('OrdersBase.kts')
    cur = conn.cursor()
    cur.execute('SELECT * FROM orders')
    orders = cur.fetchall()

    sum_all_check = 0
    sum_bonus = 0
    sum_tenge = 0
    info = ''
    for el in orders:
        if str(date) == str(el[5]):
            info += str(
                f'id –∑–∞–∫–∞–∑–∞: {el[0]}, –°—É–º–º–∞ —á–µ–∫–∞: {el[2]}, –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {el[5]}, –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {el[6]}\n')
            sum_all_check += el[2]
            sum_bonus += el[4]
            sum_tenge += el[3]
    if len(info) >= 4096:
        for i in range(0, len(info), 4096):
            msg = bot.send_message(call.message.chat.id, str(info[i:i + 4096]))
            msgs_id.append(msg)
    else:
        if info == '':
            msg = bot.send_message(call.message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            msgs_id.append(msg)
        else:
            msg = bot.send_message(call.message.chat.id, info)
            msgs_id.append(msg)
    msg = bot.send_message(call.message.chat.id, f'–ò—Ç–æ–≥: –û–±—â–∞—è —Å—É–º–º–∞: {sum_all_check}, –û–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏: {sum_bonus}, –û–ø–ª–∞—Ç–∞ –≤ —Ç–µ–Ω–≥–µ: {sum_tenge}')
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    cur.close()
    conn.close()

def photo_shaurma(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    shaurma1 = open('./Menu/shaurma1.jpeg', 'rb')
    shaurma2 = open('./Menu/shaurma2.jpeg', 'rb')
    shaurma_ad = open('./Menu/shaurma_ad.jpeg', 'rb')
    msg = bot.send_photo(call.message.chat.id, shaurma1)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, shaurma2)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, shaurma_ad)
    msgs_id.append(msg)

    user_msg.append(msgs_id)

def photo_rols(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    rols_cold1 = open('./Menu/rols_cold1.jpeg', 'rb')
    rols_cold2 = open('./Menu/rols_cold2.jpeg', 'rb')
    rols_hotbox = open('./Menu/rols_hotbox.jpeg', 'rb')
    rols_infriture = open('./Menu/rols_infriture.jpeg', 'rb')
    msg = bot.send_photo(call.message.chat.id, rols_cold1)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, rols_cold2)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, rols_hotbox)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, rols_infriture)
    msgs_id.append(msg)

    user_msg.append(msgs_id)

def photo_oni(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    rols_oni = open('./Menu/rols_oni.jpeg', 'rb')
    rols_ad = open('./Menu/rols_ad.jpeg', 'rb')
    msg = bot.send_photo(call.message.chat.id, rols_oni)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, rols_ad)
    msgs_id.append(msg)

    user_msg.append(msgs_id)

def photo_pizza(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    pizza1 = open('./Menu/pizza1.jpeg', 'rb')
    pizza2 = open('./Menu/pizza2.jpeg', 'rb')
    pizza_ad = open('./Menu/pizza_ad.jpeg', 'rb')
    msg = bot.send_photo(call.message.chat.id, pizza1)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, pizza2)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, pizza_ad)
    msgs_id.append(msg)

    user_msg.append(msgs_id)

def photo_coffee(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    coffee = open('./Menu/coffee.jpeg', 'rb')
    coffe_ad = open('./Menu/coffe_ad.jpeg', 'rb')
    msg = bot.send_photo(call.message.chat.id, coffee)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, coffe_ad)
    msgs_id.append(msg)

    user_msg.append(msgs_id)

def photo_tea(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    tea = open('./Menu/tea.jpeg', 'rb')
    msg = bot.send_photo(call.message.chat.id, tea)
    msgs_id.append(msg)

    user_msg.append(msgs_id)

def photo_sets(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    sets_1 = open('./Menu/Sets/sets_1.jpg', 'rb')
    sets_2 = open('./Menu/Sets/sets_2.jpg', 'rb')
    msg = bot.send_photo(call.message.chat.id, sets_1)
    msgs_id.append(msg)
    msg = bot.send_photo(call.message.chat.id, sets_2)
    msgs_id.append(msg)

    user_msg.append(msgs_id)

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
@bot.callback_query_handler(func=lambda callback: True)
def callback_message(call):
    user_id = call.from_user.id
    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if call.data == 'pid':
        bot.send_message(call.message.chat.id, '–ß—Ç–æ?')
    elif call.data == 'b_reg_yes':
        ref_link_accept(call.message, call)
    elif call.data == 'b_reg_no':
        ref_link_accept(call.message, call)
    elif call.data == 'menu':
        menu(call.message)
    elif call.data == 'reg':
        register_user(call.message)
    # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ë–æ–Ω—É—Å—ã –≤ –ú–µ–Ω—é
    elif call.data == 'user_bonus':
        send_bonuses_user(call)
    elif call.data == 'contacts':  # –ö–Ω–æ–ø–∫–∞ –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ –ú–µ–Ω—é
        send_contact_user(call)
    elif call.data == 'kitchen_menu':  # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –≤ –ú–µ–Ω—é
        markup = types.InlineKeyboardMarkup()
        b_sh = types.InlineKeyboardButton('üåØ–®–∞—É—Ä–º–∞üåØ', callback_data='shaurma')
        b_rols = types.InlineKeyboardButton('üç£–†–æ–ª–ª—ãüç£', callback_data='rols')
        b_oni = types.InlineKeyboardButton('üçô–û–Ω–∏–≥–∏—Ä–∏, –°—É—à–∏ –∏ –ì—É–Ω–∫–∞–Ω—ãüçô', callback_data='oni')
        b_pizza = types.InlineKeyboardButton('üçï–ü–∏—Ü—Ü–∞üçï', callback_data='pizza')
        b_coffee = types.InlineKeyboardButton('‚òïÔ∏è–ö–æ—Ñ–µ‚òïÔ∏è', callback_data='coffee')
        b_tea = types.InlineKeyboardButton('üçµ–ß–∞–πüçµ', callback_data='tea')
        b_sets = types.InlineKeyboardButton('üç±–°–µ—Ç—ãüç±', callback_data='sets')
        # b_sm = types.InlineKeyboardButton('üçïüåØüç£üçô‚òïÔ∏èüçµüç±', callback_data='sm')

        b_back = types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back_menu')

        markup.add(b_sh)
        markup.add(b_rols)
        markup.add(b_oni)
        markup.add(b_pizza)
        markup.add(b_coffee, b_tea)
        markup.add(b_sets)

        markup.add(b_back)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'shaurma':
        photo_shaurma(call)
    elif call.data == 'rols':
        photo_rols(call)
    elif call.data == 'oni':
        photo_oni(call)
    elif call.data == 'pizza':
        photo_pizza(call)
    elif call.data == 'coffee':
        photo_coffee(call)
    elif call.data == 'tea':
        photo_tea(call)
    elif call.data == 'sets':
        photo_sets(call)
    elif call.data == 'my_ref':  # –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –≤ –ú–µ–Ω—é
        my_ref(call)
    elif call.data == 'send_request':  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –ú–µ–Ω—é
        send_request_user(call)
    elif call.data == 'edit_profile':  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ú–µ–Ω—é
        markup = types.InlineKeyboardMarkup()
        b_name = types.InlineKeyboardButton('‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è‚úèÔ∏è', callback_data='rename')
        b_date_born = types.InlineKeyboardButton('‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è‚úèÔ∏è', callback_data='redate_born')
        b_sex = types.InlineKeyboardButton('‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª‚úèÔ∏è', callback_data='resex')
        b_info = types.InlineKeyboardButton('–û–±–æ –º–Ω–µ', callback_data='info')
        b_back = types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back_menu')
        markup.add(b_name)
        markup.add(b_date_born, b_sex)
        markup.add(b_info)
        markup.add(b_back)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'back_menu':
        markup = types.InlineKeyboardMarkup()
        btn_bon = types.InlineKeyboardButton('üéÅ–ë–æ–Ω—É—Å—ãüéÅ', callback_data='user_bonus')
        btn_cont = types.InlineKeyboardButton('üìû–ö–æ–Ω—Ç–∞–∫—Ç—ãüìû', callback_data='contacts')
        btn_inst = types.InlineKeyboardButton('üì∏–ò–Ω—Å—Ç–∞–≥—Ä–∞–ºüì∏',
                                              url='https://www.instagram.com/kitsune.shemonaiha?igsh=NmpyZW9rcnVhMTUx')
        btn_menu = types.InlineKeyboardButton('üì±–ú–µ–Ω—éüì±', callback_data='kitchen_menu')
        btn_ref = types.InlineKeyboardButton('üí∞–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ãüí∞', callback_data='my_ref')
        btn_ans = types.InlineKeyboardButton('‚úèÔ∏è–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤‚úèÔ∏è', callback_data='send_request')
        btn_edit_user = types.InlineKeyboardButton('üìã–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüìã', callback_data='edit_profile')
        btn_queations = types.InlineKeyboardButton('‚ùì–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì', callback_data='queations')
        markup.add(btn_bon)
        markup.add(btn_cont, btn_inst)
        markup.add(btn_menu)
        markup.add(btn_ref)
        markup.add(btn_ans)
        markup.add(btn_edit_user)
        markup.add(btn_queations)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'queations':
        markup = types.InlineKeyboardMarkup()
        b_work_ref = types.InlineKeyboardButton('üéÅ–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–πüéÅ', callback_data='ref_w')
        b_bonus = types.InlineKeyboardButton('üí∞–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ–Ω—É—Å—ãüí∞', callback_data='bonus_w')
        b_req = types.InlineKeyboardButton('‚úèÔ∏è–û—Ç–∑—ã–≤—ã‚úèÔ∏è', callback_data='req_w')
        b_profile = types.InlineKeyboardButton('üìã–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüìã', callback_data='profile_w')
        b_back = types.InlineKeyboardButton('üîô–ù–∞–∑–∞–¥üîô', callback_data='back_menu')
        markup.add(b_work_ref)
        markup.add(b_bonus)
        markup.add(b_req)
        markup.add(b_profile)
        markup.add(b_back)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'ref_w':
        usid = call.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    try:
                        bot.delete_message(call.message.chat.id, m.message_id)
                    except Exception as e:
                        print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msg = bot.send_message(call.message.chat.id, '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π?')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        msg = bot.send_message(call.message.chat.id,
                               '–í—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –£–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –≤ –º–µ–Ω—é –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ë–æ–Ω—É—Å—ã" –∏–ª–∏ "–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã".\n–¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∑–∞–∫–∞–∑—ã –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞.')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
    elif call.data == 'bonus_w':
        usid = call.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    try:
                        bot.delete_message(call.message.chat.id, m.message_id)
                    except Exception as e:
                        print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msg = bot.send_message(call.message.chat.id, '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ–Ω—É—Å—ã?')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        msg = bot.send_message(call.message.chat.id,
                               '–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã. –¢–∞–∫–∂–µ —ç—Ç–∏ –±–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å.\n1 –ë–æ–Ω—É—Å = 1 –¢–µ–Ω–≥–µ\n–ö–∞–∫ –∏—Ö —Ç—Ä–∞—Ç–∏—Ç—å? –ö–æ–≥–¥–∞ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑, –≤–∞–º —Å–æ–æ–±—â–∞—Ç —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –±–æ–Ω—É—Å–æ–≤ –∏ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å. –¢–∞–∫–∂–µ –±–æ–Ω—É—Å—ã –º–æ–≥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –¥—Ä—É–≥–∞, –∫–∞–∫ –≤–∞–º, —Ç–∞–∫ –∏ –¥—Ä—É–≥—É.\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–µ–π—á–∞—Å –±–æ–Ω—É—Å–æ–≤ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ë–æ–Ω—É—Å—ã".\n–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—É–º–º –≤—ã–∫—É–ø–∞, –≤–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω.')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
    elif call.data == 'req_w':
        usid = call.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    try:
                        bot.delete_message(call.message.chat.id, m.message_id)
                    except Exception as e:
                        print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msg = bot.send_message(call.message.chat.id, '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–∑—ã–≤—ã?')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        msg = bot.send_message(call.message.chat.id,
                               '–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í –º–µ–Ω—é –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "‚úèÔ∏è–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤‚úèÔ∏è". –ñ–º–µ—Ç–µ –Ω–∞ –Ω–µ—ë –∏ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–≤ –≤–æ–ø—Ä–æ—Å, –≤ –±–ª–∏–∑–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ñ–æ—Ç–æ, –∏ –≤–∏–¥–µ–æ, –∏ –¥–∞–∂–µ –∫—Ä—É–≥–ª—è—à–∫–∏! –í–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω)')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
    elif call.data == 'profile_w':
        usid = call.from_user.id
        for i in user_msg:
            if i[0] == usid:
                i.pop(0)
                for m in i:
                    try:
                        bot.delete_message(call.message.chat.id, m.message_id)
                    except Exception as e:
                        print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                user_msg.remove(i)
        msgs_id = []
        msgs_id.append(usid)
        msg = bot.send_message(call.message.chat.id,
                               '–í–æ –≤–∫–ª–∞–¥–∫–µ "üìã–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüìã", –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n–í–æ –≤–∫–ª–∞–¥–∫–µ "üìû–ö–æ–Ω—Ç–∞–∫—Ç—ãüìû" –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –∞ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ –∑–∞–±—Ä–∞—Ç—å —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º.')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
    elif call.data == 'redate_born':
        red(call)
    elif call.data == 'rename':
        ren(call)
    elif call.data == 'resex':
        res(call)
    elif call.data == 'info':
        info_user(call)
    elif call.data == 'new_check':
        new_check(call)
    elif call.data == 'del_check':
        del_check(call)
    elif call.data == 'info_client':
        info_client(call)
    elif call.data == 'end_day':
        end_day(call)
    elif call.data == 'anal_back':
        markup = types.InlineKeyboardMarkup()
        b_anal = types.InlineKeyboardButton('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data='anal')
        b_sm = types.InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞', callback_data='sm')
        b_prv = types.InlineKeyboardButton('–ü—Ä–∞–≤–∫–∏', callback_data='prv')
        b_rquests = types.InlineKeyboardButton('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã—Ç—ã –æ–ø—Ä–æ—Å–æ–≤', callback_data='rquests')

        markup.add(b_anal)
        markup.add(b_sm)
        markup.add(b_prv)
        markup.add(b_rquests)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'anal':
        markup = types.InlineKeyboardMarkup()
        b_sum_checks = types.InlineKeyboardButton('–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞', callback_data='top_sum_check')
        b_count_ref = types.InlineKeyboardButton('–¢–æ–ø –ø–æ –∫–æ–ª-–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', callback_data='top_count_ref')
        b_count_bonus = types.InlineKeyboardButton('–¢–æ–ø –ø–æ –∫–æ–ª-–≤—É –±–æ–Ω—É—Å–æ–≤', callback_data='top_count_bonus')
        b_sum_average = types.InlineKeyboardButton('–¢–æ–ø –ø–æ —Å—É–º–º–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞', callback_data='top_sum_average')
        b_count_checks = types.InlineKeyboardButton('–¢–æ–ø –ø–æ –∫–æ–ª-–≤—É –∑–∞–∫–∞–∑–æ–≤', callback_data='top_count_checks')
        b_sum_from_male = types.InlineKeyboardButton('–¢–æ–ø –ø–æ —Å—É–º–º–µ –∑–∞–∫–∞–∑–æ–≤ —Å—Ä–µ–¥–∏ –ú—É–∂',
                                                     callback_data='top_sum_check_male')
        b_sum_from_female = types.InlineKeyboardButton('–¢–æ–ø –ø–æ —Å—É–º–º–µ –∑–∞–∫–∞–∑–æ–≤ —Å—Ä–µ–¥–∏ –ñ–µ–Ω',
                                                       callback_data='top_sum_check_female')
        b_count_old = types.InlineKeyboardButton('–ö–æ–ª-–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É', callback_data='top_count_old')
        b_sum_in_old = types.InlineKeyboardButton('–¢–æ–ø —Å—É–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É', callback_data='top_sum_in_old')

        b_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='anal_back')

        markup.add(b_sum_checks)
        markup.add(b_count_ref)
        markup.add(b_count_bonus)
        markup.add(b_sum_average)
        markup.add(b_count_checks)
        markup.add(b_sum_from_male)
        markup.add(b_sum_from_female)
        markup.add(b_count_old)
        markup.add(b_sum_in_old)
        markup.add(b_back)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'top_sum_check':
        date_settings(call, 1)
    elif call.data == 'top_count_ref':
        date_settings(call, 2)
    elif call.data == 'top_count_bonus':
        date_settings(call, 3)
    elif call.data == 'top_sum_average':
        date_settings(call, 4)
    elif call.data == 'top_count_checks':
        date_settings(call, 5)
    elif call.data == 'top_sum_check_male':
        date_settings(call, 6)
    elif call.data == 'top_sum_check_female':
        date_settings(call, 7)
    elif call.data == 'top_count_old':
        date_settings(call, 8)
    elif call.data == 'top_sum_in_old':
        markup = types.InlineKeyboardMarkup()
        b_date_10 = types.InlineKeyboardButton('–û—Ç 6 –¥–æ 10', callback_data='sum_date_10')
        b_date_15 = types.InlineKeyboardButton('–û—Ç 11 –¥–æ 15', callback_data='sum_date_15')
        b_date_20 = types.InlineKeyboardButton('–û—Ç 16 –¥–æ 20', callback_data='sum_date_20')
        b_date_25 = types.InlineKeyboardButton('–û—Ç 21 –¥–æ 25', callback_data='sum_date_25')
        b_date_30 = types.InlineKeyboardButton('–û—Ç 26 –¥–æ 30', callback_data='sum_date_30')
        b_date_40 = types.InlineKeyboardButton('–û—Ç 31 –¥–æ 40', callback_data='sum_date_40')
        b_date_45 = types.InlineKeyboardButton('–û—Ç 41 –∏ –±–æ–ª—å—à–µ', callback_data='sum_date_45')

        b_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='anal')

        markup.add(b_date_10)
        markup.add(b_date_15)
        markup.add(b_date_20)
        markup.add(b_date_25)
        markup.add(b_date_30)
        markup.add(b_date_40)
        markup.add(b_date_45)
        markup.add(b_back)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'sum_date_10':
        sum_in_old(call, 10)
    elif call.data == 'sum_date_15':
        sum_in_old(call, 15)
    elif call.data == 'sum_date_20':
        sum_in_old(call, 20)
    elif call.data == 'sum_date_25':
        sum_in_old(call, 25)
    elif call.data == 'sum_date_30':
        sum_in_old(call, 30)
    elif call.data == 'sum_date_40':
        sum_in_old(call, 40)
    elif call.data == 'sum_date_45':
        sum_in_old(call, 45)
    elif call.data == 'sm':
        markup = types.InlineKeyboardMarkup()
        b_sm_all = types.InlineKeyboardButton('–†–∞–∑–æ—Å–ª–∞—Ç—å –í–°–ï–ú', callback_data='sm_all')
        b_sm_person = types.InlineKeyboardButton('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è', callback_data='sm_person')
        b_sm_groups = types.InlineKeyboardButton('–ü–æ –≥—Ä—É–ø–ø–∞–º', callback_data='sm_groups')

        b_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='anal_back')

        markup.add(b_sm_all)
        markup.add(b_sm_person)
        markup.add(b_sm_groups)
        markup.add(b_back)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'sm_all':
        sm_all(call)
    elif call.data == 'sm_person':
        sm_person(call)
    elif call.data == 'sm_groups':
        sm_groups(call)
    elif call.data == 'prv':
        markup = types.InlineKeyboardMarkup()
        b_sm_all = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã', callback_data='prv1')
        b_sm_person = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', callback_data='prv2')

        b_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='anal_back')

        markup.add(b_sm_all)
        markup.add(b_sm_person)
        markup.add(b_back)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'prv1':
        prv(call)
    elif call.data == 'prv2':
        procent_f(call)
    elif call.data == 'rquests':
        markup = types.InlineKeyboardMarkup()

        b_all = types.InlineKeyboardButton('–í—Å–µ –æ–ø—Ä–æ—Å—ã', callback_data='poll_all')
        b_current = types.InlineKeyboardButton('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data='poll_current')
        b_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='anal_back')

        markup.add(b_all)
        markup.add(b_current)
        markup.add(b_back)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data == 'poll_all':
        show_results(call)
    elif call.data == 'poll_current':
        search_poll(call)
    else:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if '_' in call.data:
            poll_id, vote = call.data.split('_')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            _cur.execute("SELECT * FROM user_votes WHERE user_id = ? AND poll_id = ?", (user_id, poll_id))
            if _cur.fetchone():
                bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ.")
            else:
                _cur.execute("INSERT INTO user_votes (user_id, poll_id, vote) VALUES (?, ?, ?)",
                             (user_id, poll_id, vote))
                _cur.execute("UPDATE options SET votes = votes + 1 WHERE poll_id = ? AND option = ?",
                             (poll_id, vote))
                _conn.commit()
                bot.answer_callback_query(call.id, f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {vote}")

                # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–≥ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤ --------------------------------------------------------------------------------------------
def show_results(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    chat_id = call.message.chat.id
    results_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤:\n"
    _cur.execute("SELECT poll_id, question FROM polls")
    polls = _cur.fetchall()
    for poll_id, question in polls:
        results_message += f"\n–û–ø—Ä–æ—Å: {question}\n"
        _cur.execute("SELECT option, votes FROM options WHERE poll_id = ?", (poll_id,))
        options = _cur.fetchall()
        for option, count in options:
            results_message += f"{option}: {count} –≥–æ–ª–æ—Å–æ–≤\n"

    if len(results_message) >= 4096:
        for i in range(0, len(results_message), 4096):
            msg = bot.send_message(chat_id, str(results_message[i:i + 4096]))
            msgs_id.append(msg)
        user_msg.append(msgs_id)
    else:
        msg = bot.send_message(chat_id, results_message)
        msgs_id.append(msg)
        user_msg.append(msgs_id)

def search_poll(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(msg, process_search_query)

def process_search_query(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    chat_id = message.chat.id
    query = message.text
    _cur.execute("SELECT poll_id, question FROM polls WHERE question LIKE ?", ('%' + query + '%',))
    polls = _cur.fetchall()

    if polls:
        results_message = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:\n"
        for poll_id, question in polls:
            results_message += f"\n–û–ø—Ä–æ—Å: {question}\n"
            _cur.execute("SELECT option, votes FROM options WHERE poll_id = ?", (poll_id,))
            options = _cur.fetchall()
            for option, count in options:
                results_message += f"{option}: {count} –≥–æ–ª–æ—Å–æ–≤\n"
        if len(results_message) >= 4096:
            for i in range(0, len(results_message), 4096):
                msg = bot.send_message(chat_id, str(results_message[i:i + 4096]))
                msgs_id.append(msg)
            user_msg.append(msgs_id)
        else:
            msg = bot.send_message(chat_id, results_message)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
    else:
        bot.send_message(chat_id, "–û–ø—Ä–æ—Å–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    user_states[usid] = False

# ----------------------------------------------------------------------------------------------------------------

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    chat_id = None
    for ad in admins:
        if message.chat.id == ad:
            chat_id = ad
    if chat_id != None:
        markup = types.InlineKeyboardMarkup()
        b_anal = types.InlineKeyboardButton('–ê–ù–ê–õ–∏—Ç–∏–∫–∞', callback_data='anal')
        b_sm = types.InlineKeyboardButton('–†–∞—Å-–¢—Ä–∏-—é–ª—è—Ç—å(–†–∞—Å—Å—ã–ª–∫–∞)', callback_data='sm')
        b_prv = types.InlineKeyboardButton('—Å–ü—Ä–∞–≤–∫–∏', callback_data='prv')
        b_rquests = types.InlineKeyboardButton('–†–µ–∑–£–õ–¨–¢–ê—Ç—ã –æ–ø—Ä–æ—Å–æ–≤', callback_data='rquests')

        markup.add(b_anal)
        markup.add(b_sm)
        markup.add(b_prv)
        markup.add(b_rquests)

        bot.send_message(chat_id, '–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å–æ–ª—å.\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–∏—Å—É–µ—Ç?', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f'–í–∞—à –∫–æ–¥ {message.chat.id}')

def procent_f(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞\n(–±–µ–∑ + –∏ –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 7)')
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, procent_f1)

def procent_f1(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if message.text == '–û—Ç–º–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    isCheckTrue = any(character.isdigit() for character in message.text)
    if isCheckTrue:
        user_number = message.text
        conn2 = sqlite3.connect('ClientsBase.kts')
        cur2 = conn2.cursor()
        cur2.execute('SELECT * FROM users')
        users = cur2.fetchall()
        isFind = False
        chat_client = None
        procent_ref = None
        name = None
        for el in users:
            if user_number == el[2]:
                chat_client = el[6]
                name = el[1]
                procent_ref = el[14]
                isFind = True
        cur2.close()
        conn2.close()
        if isFind:
            msg = bot.send_message(message.chat.id,
                                   f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{name} - {user_number}] –±—ã–ª –Ω–∞–π–¥–µ–Ω. –ï–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - {procent_ref}. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ù–∞–ø—Ä–∏–º–µ—Ä: 0.01) –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å.')
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, procent_f2, chat_client)
        else:
            msg = bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
            msgs_id.append(msg)
            user_states[usid] = False
            user_msg.append(msgs_id)
    else:
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

def procent_f2(message, chat_us):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if message.text == '–û—Ç–º–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

    isCheckTrue = any(character.isdigit() for character in message.text)
    if isinstance(message.text, float):
        isCheckTrue = True
    if isCheckTrue:
        _procent_ref = float(message.text)
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        cur.execute(f'UPDATE users SET procent_ref = {_procent_ref} WHERE chat_id = {chat_us}')
        conn.commit()
        user = cur.execute(f"SELECT * FROM users WHERE chat_id = {chat_us}").fetchone()
        msg = bot.send_message(message.chat.id, f'–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {_procent_ref} —É [{user[1]} - {user[2]}]')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        user_states[usid] = False
        cur.close()
        conn.close()
    else:
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

def prv(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞\n(–±–µ–∑ + –∏ –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 7)')
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, prv1)

def prv1(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if message.text == '–û—Ç–º–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    isCheckTrue = any(character.isdigit() for character in message.text)
    if isCheckTrue:
        user_number = message.text
        conn2 = sqlite3.connect('ClientsBase.kts')
        cur2 = conn2.cursor()
        cur2.execute('SELECT * FROM users')
        users = cur2.fetchall()
        isFind = False
        chat_client = None
        bonus = None
        name = None
        for el in users:
            if user_number == el[2]:
                chat_client = el[6]
                name = el[1]
                bonus = el[8]
                isFind = True
        cur2.close()
        conn2.close()
        if isFind:
            msg = bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{name} - {user_number}] –±—ã–ª –Ω–∞–π–¥–µ–Ω. –£ –Ω–µ–≥–æ {bonus} –±–æ–Ω—É—Å–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å.')
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, prv2, chat_client)
        else:
            msg = bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
            msgs_id.append(msg)
            user_states[usid] = False
            user_msg.append(msgs_id)
    else:
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

def prv2(message, chat_us):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if message.text == '–û—Ç–º–µ–Ω–∞':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

    isCheckTrue = any(character.isdigit() for character in message.text)
    if isCheckTrue:
        bonus = int(message.text)
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        cur.execute(f'UPDATE users SET bonus = {bonus} WHERE chat_id = {chat_us}')
        conn.commit()
        user = cur.execute(f"SELECT * FROM users WHERE chat_id = {chat_us}").fetchone()
        msg = bot.send_message(message.chat.id, f'–ë–æ–Ω—É—Å—ã –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {bonus} —É [{user[1]} - {user[2]}]')
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        user_states[usid] = False
        cur.close()
        conn.close()
    else:
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

# –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
def sm_all(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
    markup.row(b_cancel)

    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º', reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, sm_all_1)

def sm_all_1(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()

    cur.execute('SELECT * FROM users')
    users = cur.fetchall()

    markup = types.ReplyKeyboardRemove()

    if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    if message.text == '–û–ø—Ä–æ—Å':

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(msg, poll, users)
        cur.close()
        conn.close()
        return

    for el in users:
        if int(el[6]) != message.chat.id:
            if message.content_type == 'text':
                bot.send_message(int(el[6]), message.text)
            elif message.content_type == 'photo':
                raw = message.photo[2].file_id
                name = raw + '.jpg'
                file_info = bot.get_file(raw)
                downloaded_file = bot.download_file(file_info.file_path)
                with open(f'./Temp/{name}', "wb") as new_file:
                    new_file.write(downloaded_file)
                img = open(f'./Temp/{name}', 'rb')
                if message.caption != 'None':
                    bot.send_photo(int(el[6]), img, caption=message.caption)
                else:
                    bot.send_photo(int(el[6]), img)
            elif message.content_type == 'video':
                raw = message.video.file_id
                name = raw + '.mp4'
                file_info = bot.get_file(raw)
                downloaded_file = bot.download_file(file_info.file_path)
                with open(f'./Temp/{name}', "wb") as new_file:
                    new_file.write(downloaded_file)
                img = open(f'./Temp/{name}', 'rb')
                if message.caption != 'None':
                    bot.send_video(int(el[6]), img, caption=message.caption)
                else:
                    bot.send_video(int(el[6]), img)
    cur.close()
    conn.close()
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
    markup.row(b_cancel)
    msg = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
                           reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(message, sm_all_1)

# –°–ò–°–¢–ï–ú–ê –û–ü–†–û–°–û–í ------------------------------------------------------------------------------------------------
def poll(message, users):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    markup = types.ReplyKeyboardRemove()

    if message.text != 'None' and message.text != '–û—Ç–º–µ–Ω–∞':
        chat_id = message.chat.id
        question = message.caption if message.content_type == 'photo' else message.text
        photo = None
        if message.content_type == 'photo':
            raw = message.photo[-1].file_id
            photo = raw + '.jpg'
            file_info = bot.get_file(raw)
            downloaded_file = bot.download_file(file_info.file_path)
            os.makedirs('./Temp', exist_ok=True)
            with open(f'./Temp/{photo}', "wb") as new_file:
                new_file.write(downloaded_file)
        current_polls[chat_id] = {'question': question, 'photo': photo}

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫:", reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)

        bot.register_next_step_handler(msg, process_button_count_step, users)
    elif message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        msg = bot.send_message(message.chat.id, f'–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=markup)
        msgs_id.append(msg)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    else:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        msg = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)

        bot.register_next_step_handler(message, poll, users)

def process_button_count_step(message, users):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    markup = types.ReplyKeyboardRemove()

    if message.text != 'None' and message.text != '–û—Ç–º–µ–Ω–∞':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        isCheckTrue = any(character.isdigit() for character in message.text)
        if isCheckTrue:
            chat_id = message.chat.id
            button_count = int(message.text)
            current_polls[chat_id]['button_count'] = button_count
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ "–ù–æ–≤—É—é —Å—Ç—Ä–æ–∫—É":', reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(msg, process_button_names_step, users)
        else:
            msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, process_button_count_step, users)
    elif message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        msg = bot.send_message(message.chat.id, f'–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=markup)
        msgs_id.append(msg)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    else:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, process_button_count_step, users)

def process_button_names_step(message, users):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    markup = types.ReplyKeyboardRemove()

    chat_id = message.chat.id
    if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        del current_polls[chat_id]

        msg = bot.send_message(message.chat.id, f'–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=markup)
        msgs_id.append(msg)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    elif message.content_type == 'text':
        button_names = [name.strip() for name in message.text.split('\n')]
        if len(button_names) != current_polls[chat_id]['button_count']:
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

            b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
            markup.row(b_cancel)

            bot.reply_to(message,
                         f"–í—ã –≤–≤–µ–ª–∏ {len(button_names)} –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –≤–º–µ—Å—Ç–æ {current_polls[chat_id]['button_count']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            msg = bot.reply_to(message,
                               f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è {current_polls[chat_id]["button_count"]} –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ "–ù–æ–≤—É—é —Å—Ç—Ä–æ–∫—É":', reply_markup=markup)
            bot.register_next_step_handler(msg, process_button_names_step, users)
            return

        current_polls[chat_id]['button_names'] = button_names
        question = current_polls[chat_id]['question']
        photo = current_polls[chat_id]['photo']
        poll_id = str(message.message_id)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø—Ä–æ—Å–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        create_poll_message(question, button_names, poll_id, users, photo)

        msg = bot.send_message(message.chat.id, '–û–ø—Ä–æ—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)

        user_states[usid] = False
        del current_polls[chat_id]
    else:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, process_button_names_step, users)

# –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç!
def create_poll_message(question, options, poll_id, users, photo):
    markup = types.InlineKeyboardMarkup()
    for option in options:
        markup.add(types.InlineKeyboardButton(text=option, callback_data=f'{poll_id}_{option}'))
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    for el in users:
        if photo:
            bot.send_photo(el[6], photo=open(f'./Temp/{photo}', 'rb'), caption=question, reply_markup=markup)
        else:
            bot.send_message(el[6], question, reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –æ–ø—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    _cur.execute("INSERT INTO polls (poll_id, question) VALUES (?, ?)", (poll_id, question))
    for option in options:
        _cur.execute("INSERT INTO options (poll_id, option, votes) VALUES (?, ?, 0)", (poll_id, option))
    _conn.commit()
# ----------------------------------------------------------------------------------------------------------------

def sm_person(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
    markup.row(b_cancel)

    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +)', reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, sm_person1)

def sm_person1(message):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    markup = types.ReplyKeyboardRemove()

    if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    isCheckTrue = any(character.isdigit() for character in message.text)
    if isCheckTrue:
        user_number = message.text
        conn2 = sqlite3.connect('ClientsBase.kts')
        cur2 = conn2.cursor()
        cur2.execute('SELECT * FROM users')
        users = cur2.fetchall()
        isFind = False
        chat_client = None
        for el in users:
            if user_number == el[2]:
                chat_client = el[6]
                isFind = True
        cur2.close()
        conn2.close()
        if isFind:
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

            b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
            markup.row(b_cancel)

            msg = bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, sm_person2, chat_client)
        else:
            msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
            msgs_id.append(msg)
            user_states[usid] = False
            user_msg.append(msgs_id)

def sm_person2(message, chat_id):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if message.content_type == 'text':
        if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
            markup = types.ReplyKeyboardRemove()
            msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
            msgs_id.append(msg)
            user_states[usid] = False
            user_msg.append(msgs_id)
            return
        if message.text == '–û–ø—Ä–æ—Å':
            users = [[0,0,0,0,0,0,chat_id]]

            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

            b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
            markup.row(b_cancel)

            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:', reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(msg, poll, users)
            return
        bot.send_message(chat_id, message.text)
    elif message.content_type == 'photo':
        raw = message.photo[2].file_id
        name = raw + '.jpg'
        file_info = bot.get_file(raw)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(f'./Temp/{name}', "wb") as new_file:
            new_file.write(downloaded_file)
        img = open(f'./Temp/{name}', 'rb')
        if message.caption != 'None':
            bot.send_photo(chat_id, img, caption=message.caption)
        else:
            bot.send_photo(chat_id, img)
    elif message.content_type == 'video':
        raw = message.video.file_id
        name = raw + '.mp4'
        file_info = bot.get_file(raw)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(f'./Temp/{name}', "wb") as new_file:
            new_file.write(downloaded_file)
        img = open(f'./Temp/{name}', 'rb')
        if message.caption != 'None':
            bot.send_video(chat_id, img, caption=message.caption)
        else:
            bot.send_video(chat_id, img)
    elif message.content_type == 'poll':
        mess = bot.copy_message(message.chat.id, message.chat.id, message.message_id)
        bot.forward_message(chat_id, message.chat.id, mess.message_id)
    else:
        bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
    markup.row(b_cancel)
    msg = bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(message, sm_person2, chat_id)

def sm_groups(call):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
    markup.row(b_cancel)

    msg = bot.send_message(call.message.chat.id, '–í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞.\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.\n–ß—Ç–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö –≤–≤–µ–¥–∏—Ç–µ: –í—Å–µ', reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, sm_groups1)

def sm_groups1(message):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)

    markup = types.ReplyKeyboardRemove()

    isCheckTrue = any(character.isdigit() for character in message.text)
    if message.text == '–í—Å–µ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        b_a = types.KeyboardButton('–í—Å–µ')
        b_m = types.KeyboardButton('–ú—É–∂')
        b_j = types.KeyboardButton('–ñ–µ–Ω')
        markup.add(b_a)
        markup.add(b_m)
        markup.add(b_j)
        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        msg = bot.send_message(message.chat.id,
                              '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª.', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, sm_groups3)
    elif message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    elif isCheckTrue:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        yaer_from = int(message.text)
        msg = bot.send_message(message.chat.id,
                              '–í–≤–µ–¥–∏—Ç–µ –¥–æ –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, sm_groups2,yaer_from)
    else:
        msg = bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞(', reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

def sm_groups2(message, yaer_from):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)

    markup = types.ReplyKeyboardRemove()

    isCheckTrue = any(character.isdigit() for character in message.text)
    if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    elif isCheckTrue:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        b_a = types.KeyboardButton('–í—Å–µ')
        b_m = types.KeyboardButton('–ú—É–∂')
        b_j = types.KeyboardButton('–ñ–µ–Ω')
        markup.add(b_a)
        markup.add(b_m)
        markup.add(b_j)
        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        yaer_to = int(message.text)
        msg = bot.send_message(message.chat.id,
                              '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª.', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, sm_groups3, yaer_from, yaer_to)
    else:
        msg = bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞(', reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

def sm_groups3(message, year_from = 0, year_to = 0):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)
    markup = types.ReplyKeyboardRemove()
    if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
        msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return
    elif message.text == '–í—Å–µ':
        mmm = message.text

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, sm_groups4, year_from, year_to, mmm)
    elif message.text == '–ú—É–∂':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        mmm = message.text
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, sm_groups4, year_from, year_to, mmm)
    elif message.text == '–ñ–µ–Ω':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

        b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.row(b_cancel)

        mmm = message.text
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.', reply_markup=markup)
        msgs_id.append(msg)
        user_msg.append(msgs_id)
        bot.register_next_step_handler(message, sm_groups4, year_from, year_to, mmm)
    else:
        msg = bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞(', reply_markup=markup)
        msgs_id.append(msg)
        user_states[usid] = False
        user_msg.append(msgs_id)
        return

def sm_groups4(message,year_from, year_to, mmm):
    usid = message.from_user.id
    msgs_id = []
    msgs_id.append(usid)

    markup = types.ReplyKeyboardRemove()

    if mmm == '–í—Å–µ':
        if year_from == 0 and year_to == 0:
            if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
                msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
                msgs_id.append(msg)
                user_states[usid] = False
                user_msg.append(msgs_id)
                return
            if message.text == '–û–ø—Ä–æ—Å':
                conn = sqlite3.connect('ClientsBase.kts')
                cur = conn.cursor()

                cur.execute('SELECT * FROM users')
                users = cur.fetchall()

                markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

                b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
                markup.row(b_cancel)

                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:', reply_markup=markup)
                msgs_id.append(msg)
                user_msg.append(msgs_id)
                bot.register_next_step_handler(msg, poll, users)
                cur.close()
                conn.close()
                return

            conn = sqlite3.connect('ClientsBase.kts')
            cur = conn.cursor()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            mess = None
            if message.content_type == 'poll':
                mess = bot.copy_message(message.chat.id, message.chat.id, message.message_id)
            for el in users:
                if int(el[6]) != message.chat.id:
                    if message.content_type == 'text':

                        bot.send_message(el[6], message.text)

                    elif message.content_type == 'photo':
                        raw = message.photo[2].file_id
                        name = raw + '.jpg'
                        file_info = bot.get_file(raw)
                        downloaded_file = bot.download_file(file_info.file_path)
                        with open(f'./Temp/{name}', "wb") as new_file:
                            new_file.write(downloaded_file)
                        img = open(f'./Temp/{name}', 'rb')
                        bot.send_photo(el[6], img)
                        if message.caption != 'None':
                            bot.send_photo(el[6], img, caption=message.caption)
                        else:
                            bot.send_photo(el[6], img)
                    elif message.content_type == 'video':
                        raw = message.video.file_id
                        name = raw + '.mp4'
                        file_info = bot.get_file(raw)
                        downloaded_file = bot.download_file(file_info.file_path)
                        with open(f'./Temp/{name}', "wb") as new_file:
                            new_file.write(downloaded_file)
                        img = open(f'./Temp/{name}', 'rb')
                        if message.caption != 'None':
                            bot.send_video(el[6], img, caption=message.caption)
                        else:
                            bot.send_video(el[6], img)
                    elif message.content_type == 'poll':
                        bot.forward_message(el[6], message.chat.id, mess.message_id)
            cur.close()
            conn.close()
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

            b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
            markup.row(b_cancel)
            msg = bot.send_message(message.chat.id,
                                   '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
                                   reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, sm_groups4, year_from, year_to, mmm)
        else:
            date_now = datetime.now().date().year
            date_from = date_now - year_from
            date_to = date_now - year_to

            if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
                msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
                msgs_id.append(msg)
                user_states[usid] = False
                user_msg.append(msgs_id)
                return
            if message.text == '–û–ø—Ä–æ—Å':
                conn = sqlite3.connect('ClientsBase.kts')
                cur = conn.cursor()

                cur.execute('SELECT * FROM users')
                users = cur.fetchall()
                pro_users = []

                markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

                b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
                markup.row(b_cancel)

                while date_from <= date_to:
                    for el in users:
                        if datetime.strptime(el[4], '%Y-%m-%d').year == date_from:
                            pro_users.append(el)
                    date_from += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:', reply_markup=markup)
                msgs_id.append(msg)
                user_msg.append(msgs_id)
                bot.register_next_step_handler(msg, poll, pro_users)
                cur.close()
                conn.close()
                return

            conn = sqlite3.connect('ClientsBase.kts')
            cur = conn.cursor()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            mess = None
            if message.content_type == 'poll':
                mess = bot.copy_message(message.chat.id, message.chat.id, message.message_id)
            while date_from <= date_to:
                for el in users:
                    if int(el[6]) != message.chat.id and datetime.strptime(el[4], '%Y-%m-%d').year == date_from:
                        if message.content_type == 'text':
                            bot.send_message(el[6], message.text)

                        elif message.content_type == 'photo':
                            raw = message.photo[2].file_id
                            name = raw + '.jpg'
                            file_info = bot.get_file(raw)
                            downloaded_file = bot.download_file(file_info.file_path)
                            with open(f'./Temp/{name}', "wb") as new_file:
                                new_file.write(downloaded_file)
                            img = open(f'./Temp/{name}', 'rb')
                            if message.caption != 'None':
                                bot.send_photo(el[6], img, caption=message.caption)
                            else:
                                bot.send_photo(el[6], img)
                        elif message.content_type == 'video':
                            raw = message.video.file_id
                            name = raw + '.mp4'
                            file_info = bot.get_file(raw)
                            downloaded_file = bot.download_file(file_info.file_path)
                            with open(f'./Temp/{name}', "wb") as new_file:
                                new_file.write(downloaded_file)
                            img = open(f'./Temp/{name}', 'rb')
                            if message.caption != 'None':
                                bot.send_video(el[6], img, caption=message.caption)
                            else:
                                bot.send_video(el[6], img)
                        elif message.content_type == 'poll':
                            bot.forward_message(el[6], message.chat.id, mess.message_id)
                date_from += 1
            cur.close()
            conn.close()
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

            b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
            markup.row(b_cancel)
            msg = bot.send_message(message.chat.id,
                                   '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
                                   reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, sm_groups4, year_from, year_to, mmm)
    else:
        if year_from == 0 and year_to == 0:
            if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
                msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
                msgs_id.append(msg)
                user_states[usid] = False
                user_msg.append(msgs_id)
                return
            if message.text == '–û–ø—Ä–æ—Å':
                conn = sqlite3.connect('ClientsBase.kts')
                cur = conn.cursor()

                cur.execute('SELECT * FROM users')
                users = cur.fetchall()

                markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

                b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
                markup.row(b_cancel)

                pro_users = []
                for el in users:
                    if str(el[3]) == mmm:
                        pro_users.append(el)
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:', reply_markup=markup)
                msgs_id.append(msg)
                user_msg.append(msgs_id)
                bot.register_next_step_handler(msg, poll, pro_users)
                cur.close()
                conn.close()
                return

            conn = sqlite3.connect('ClientsBase.kts')
            cur = conn.cursor()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            mess = None
            if message.content_type == 'poll':
                mess = bot.copy_message(message.chat.id, message.chat.id, message.message_id)
            for el in users:
                if int(el[6]) != message.chat.id and str(el[3]) == mmm:
                    if message.content_type == 'text':
                        bot.send_message(el[6], message.text)
                    elif message.content_type == 'photo':
                        raw = message.photo[2].file_id
                        name = raw + '.jpg'
                        file_info = bot.get_file(raw)
                        downloaded_file = bot.download_file(file_info.file_path)
                        with open(f'./Temp/{name}', "wb") as new_file:
                            new_file.write(downloaded_file)
                        img = open(f'./Temp/{name}', 'rb')
                        if message.caption != 'None':
                            bot.send_photo(el[6], img, caption=message.caption)
                        else:
                            bot.send_photo(el[6], img)
                    elif message.content_type == 'video':
                        raw = message.video.file_id
                        name = raw + '.mp4'
                        file_info = bot.get_file(raw)
                        downloaded_file = bot.download_file(file_info.file_path)
                        with open(f'./Temp/{name}', "wb") as new_file:
                            new_file.write(downloaded_file)
                        img = open(f'./Temp/{name}', 'rb')
                        if message.caption != 'None':
                            bot.send_video(el[6], img, caption=message.caption)
                        else:
                            bot.send_video(el[6], img)
                    elif message.content_type == 'poll':
                        bot.forward_message(el[6], message.chat.id, mess.message_id)
            cur.close()
            conn.close()
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

            b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
            markup.row(b_cancel)
            msg = bot.send_message(message.chat.id,
                                   '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
                                   reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, sm_groups4, year_from, year_to, mmm)
        else:
            date_now = datetime.now().date().year
            date_from = date_now - year_from
            date_to = date_now - year_to

            if message.text == '–û—Ç–º–µ–Ω–∞' or message.text == '/menu':
                msg = bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
                msgs_id.append(msg)
                user_states[usid] = False
                user_msg.append(msgs_id)
                return
            if message.text == '–û–ø—Ä–æ—Å':
                conn = sqlite3.connect('ClientsBase.kts')
                cur = conn.cursor()

                cur.execute('SELECT * FROM users')
                users = cur.fetchall()
                pro_users = []

                markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

                b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
                markup.row(b_cancel)

                while date_from <= date_to:
                    for el in users:
                        if datetime.strptime(el[4], '%Y-%m-%d').year == date_from and str(el[3] == mmm):
                            pro_users.append(el)
                    date_from += 1
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:', reply_markup=markup)
                msgs_id.append(msg)
                user_msg.append(msgs_id)
                bot.register_next_step_handler(msg, poll, pro_users)
                cur.close()
                conn.close()
                return

            conn = sqlite3.connect('ClientsBase.kts')
            cur = conn.cursor()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            mess = None
            if message.content_type == 'poll':
                mess = bot.copy_message(message.chat.id, message.chat.id, message.message_id)
            while date_from <= date_to:
                for el in users:
                    if int(el[6]) != message.chat.id and datetime.strptime(el[4], '%Y-%m-%d').year == date_from and str(el[3] == mmm):
                        if message.content_type == 'text':
                            bot.send_message(el[6], message.text)
                        elif message.content_type == 'photo':
                            raw = message.photo[2].file_id
                            name = raw + '.jpg'
                            file_info = bot.get_file(raw)
                            downloaded_file = bot.download_file(file_info.file_path)
                            with open(f'./Temp/{name}', "wb") as new_file:
                                new_file.write(downloaded_file)
                            img = open(f'./Temp/{name}', 'rb')
                            if message.caption != 'None':
                                bot.send_photo(el[6], img, caption=message.caption)
                            else:
                                bot.send_photo(el[6], img)
                        elif message.content_type == 'video':
                            raw = message.video.file_id
                            name = raw + '.mp4'
                            file_info = bot.get_file(raw)
                            downloaded_file = bot.download_file(file_info.file_path)
                            with open(f'./Temp/{name}', "wb") as new_file:
                                new_file.write(downloaded_file)
                            img = open(f'./Temp/{name}', 'rb')
                            if message.caption != 'None':
                                bot.send_video(el[6], img, caption=message.caption)
                            else:
                                bot.send_video(el[6], img)
                        elif message.content_type == 'poll':
                            bot.forward_message(el[6], message.chat.id, mess.message_id)
                date_from += 1
            cur.close()
            conn.close()
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

            b_cancel = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
            markup.row(b_cancel)
            msg = bot.send_message(message.chat.id,
                                   '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
                                   reply_markup=markup)
            msgs_id.append(msg)
            user_msg.append(msgs_id)
            bot.register_next_step_handler(message, sm_groups4, year_from, year_to, mmm)

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
def date_settings(call, id = 0):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    b_all_time = types.KeyboardButton('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è')
    b_today = types.KeyboardButton('–ó–∞ —Å–µ–≥–æ–¥–Ω—è')
    b_yesterday = types.KeyboardButton('–ó–∞ –≤—á–µ—Ä–∞')
    b_week = types.KeyboardButton('–ó–∞ 7 –¥–Ω–µ–π')
    b_mounth = types.KeyboardButton('–ó–∞ 30 –¥–Ω–µ–π')
    markup.add(b_all_time)
    markup.add(b_today)
    markup.add(b_yesterday)
    markup.add(b_week)
    markup.add(b_mounth)

    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞. –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ç–∞–∫–æ–≤ —Ñ–æ—Ä–º–∞—Ç–µ; [–î–î.–ú–ú.–ì–ì–ì–ì]\n–ò–ª–∏ –∂–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏', reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, date_settings_one, id)

def date_settings_one(message, id):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)
    if message.text == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if id == 1: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            # cur.execute('SELECT * FROM users WHERE sum_checks=(SELECT MAX(sum_checks) FROM users)')
            cur.execute('SELECT * FROM users GROUP BY sum_checks HAVING MAX(sum_checks) ORDER BY sum_checks DESC')
            sum_max = cur.fetchmany(100)
            sum_max_list = []
            for el in sum_max:
                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]
                ]
                sum_max_list.append(sum_dict)
            for el in list(reversed(sum_max_list)):
                ref_count = 0
                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                msg = bot.send_message(message.chat.id, f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)

            sum_checks = 0
            count_checks = 0
            for el in users:
                sum_checks += el[12]
                count_checks += el[11]

            msg = bot.send_message(message.chat.id, f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–°—É–º–º–∞ —á–µ–∫–æ–≤: {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {count_checks}')
            msgs_id.append(msg)
        elif id == 2: # –ü–æ –∫–æ–ª-–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {el[13]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 3: # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[8])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {el[8]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 4: # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count, 0
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            for el in new_l:
                if el[11] != 0:
                    el[14] = int(el[12]/el[11])

            sor_sum_max_list = sorted(new_l, key=lambda item: item[14])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {el[14]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É:')
            msgs_id.append(msg)
        elif id == 5: # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[11])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤:')
            msgs_id.append(msg)
        elif id == 6: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú–£–ñ–ß–ò–ù –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1
                if el[3] != '–ñ–µ–Ω':
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú—É–∂—á–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 7: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1
                if el[3] != '–ú—É–∂':
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 8: # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            count_clients_mau(message)
        cur.close()
        conn.close()
        cur_or.close()
        conn_or.close()
    elif message.text == '–ó–∞ —Å–µ–≥–æ–¥–Ω—è':
        date = datetime.now().date()
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if id == 1:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            sum_checks = 0
            count_checks = 0
            for el in sor_sum_max_list:
                sum_checks += el[12]
                count_checks += el[11]

            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–°—É–º–º–∞ —á–µ–∫–æ–≤: {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {count_checks}')

            msgs_id.append(msg)
        elif id == 2:  # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {el[13]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 3: # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[8])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {el[8]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 4: # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count, 0
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            for el in new_l:
                if el[11] != 0:
                    el[14] = int(el[12]/el[11])

            sor_sum_max_list = sorted(new_l, key=lambda item: item[14])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {el[14]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É:')
            msgs_id.append(msg)
        elif id == 5: # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[11])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤:')
            msgs_id.append(msg)
        elif id == 6: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú–£–ñ–ß–ò–ù –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1
                if el[3] != '–ñ–µ–Ω':
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú—É–∂—á–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 7: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1
                if el[3] != '–ú—É–∂':
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 8: # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            count_clients_mau(message)
        cur.close()
        conn.close()
        cur_or.close()
        conn_or.close()
    elif message.text == '–ó–∞ –≤—á–µ—Ä–∞':
        date = datetime.now().date() - timedelta(days=1)
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if id == 1:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            sum_checks = 0
            count_checks = 0
            for el in sor_sum_max_list:
                sum_checks += el[12]
                count_checks += el[11]

            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–°—É–º–º–∞ —á–µ–∫–æ–≤: {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {count_checks}')

            msgs_id.append(msg)
        elif id == 2:  # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {el[13]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 3: # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[8])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {el[8]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 4: # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count, 0
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            for el in new_l:
                if el[11] != 0:
                    el[14] = int(el[12]/el[11])

            sor_sum_max_list = sorted(new_l, key=lambda item: item[14])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {el[14]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É:')
            msgs_id.append(msg)
        elif id == 5: # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[11])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤:')
            msgs_id.append(msg)
        elif id == 6: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú–£–ñ–ß–ò–ù –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1
                if el[3] != '–ñ–µ–Ω':
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú—É–∂—á–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 7: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1
                if el[3] != '–ú—É–∂':
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 8: # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            count_clients_mau(message)
        cur_or.close()
        conn_or.close()
        cur.close()
        conn.close()
    elif message.text == '–ó–∞ 7 –¥–Ω–µ–π':
        date_now = datetime.now().date()
        date_end = date_now - timedelta(days=7)
        delta = timedelta(days=1)
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if id == 1:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            sum_checks = 0
            count_checks = 0
            for el in sor_sum_max_list:
                sum_checks += el[12]
                count_checks += el[11]

            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–°—É–º–º–∞ —á–µ–∫–æ–≤: {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {count_checks}')

            msgs_id.append(msg)
        elif id == 2:  # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {el[13]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 3: # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[8])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {el[8]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 4: # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_, 0
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            for el in new_l:
                if el[11] != 0:
                    el[13] = int(el[12]/el[11])

            sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {el[13]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É:')
            msgs_id.append(msg)
        elif id == 5: # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[11])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤:')
            msgs_id.append(msg)
        elif id == 6: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú–£–ñ–ß–ò–ù –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0 and el[3] != '–ñ–µ–Ω':
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú—É–∂—á–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 7: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0 and el[3] != '–ú—É–∂':
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 8: # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            count_clients_mau(message)
        cur_or.close()
        conn_or.close()
        cur.close()
        conn.close()
    elif message.text == '–ó–∞ 30 –¥–Ω–µ–π':
        date_now = datetime.now().date()
        date_end = date_now - timedelta(days=30)
        delta = timedelta(days=1)
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if id == 1:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1

                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            sum_checks = 0
            count_checks = 0
            for el in sor_sum_max_list:
                sum_checks += el[12]
                count_checks += el[11]

            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–°—É–º–º–∞ —á–µ–∫–æ–≤: {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {count_checks}')

            msgs_id.append(msg)
        elif id == 2:  # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {el[13]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 3: # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                sum_ = 0
                count_ = 0
                for i in orders:
                    if el[7] == i[1]:
                        sum_ += int(i[2])
                        count_ += 1

                sum_dict = [
                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                    count_,
                    sum_, ref_count
                ]
                sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[8])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {el[8]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
            msgs_id.append(msg)
        elif id == 4: # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_, 0
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            for el in new_l:
                if el[11] != 0:
                    el[13] = int(el[12] / el[11])

            sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {el[13]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É:')
            msgs_id.append(msg)
        elif id == 5: # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sor_sum_max_list = sorted(new_l, key=lambda item: item[11])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤:')
            msgs_id.append(msg)
        elif id == 6: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú–£–ñ–ß–ò–ù –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0 and el[3] != '–ñ–µ–Ω':
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú—É–∂—á–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 7: # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1]:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0 and el[3] != '–ú—É–∂':
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
            del sor_sum_max_list[0:-100]
            for el in sor_sum_max_list:
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif id == 8: # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            count_clients_mau(message)
        cur_or.close()
        conn_or.close()
        cur.close()
        conn.close()
    elif len(message.text) == 10:
        i = 0
        user_dated = message.text.split('.')
        if len(user_dated) == 3:
            for date in user_dated:
                for c in date:
                    if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9':
                        i += 1

        if i == 8:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error = False
            if (int(user_dated[1]) == 2 and int(user_dated[0]) > 28) or (int(user_dated[0]) == 0) or (
                    int(user_dated[1]) == 0) or (int(user_dated[2]) == 0):
                error = True
            if (int(user_dated[1]) == 1 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 3 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 5 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 7 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 8 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 10 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 12 and int(user_dated[0]) > 31):
                error = True
            if (int(user_dated[1]) == 4 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 6 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 9 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 11 and int(user_dated[0]) > 30):
                error = True
            if int(user_dated[1]) > 12:
                error = True

            if error == False:
                date_end = datetime.strptime(message.text, '%d.%m.%Y').date()
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É')
                msgs_id.append(msg)
                bot.register_next_step_handler(message, date_settings_two, id, date_end)

            else:
                msg = bot.send_message(message.chat.id,
                                       '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
                msgs_id.append(msg)

                bot.register_next_step_handler(message, date_settings_one, id)
        else:
            msg = bot.send_message(message.chat.id,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, date_settings_one, id)
    else:
        msg = bot.send_message(message.chat.id,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, date_settings_one, id)
    user_states[usid] = False
    user_msg.append(msgs_id)

def date_settings_two(message, id, date_end):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    if len(message.text) == 10:
        i = 0
        user_dated = message.text.split('.')
        if len(user_dated) == 3:
            for date in user_dated:
                for c in date:
                    if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9':
                        i += 1

        if i == 8:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error = False
            if (int(user_dated[1]) == 2 and int(user_dated[0]) > 28) or (int(user_dated[0]) == 0) or (
                int(user_dated[1]) == 0) or (int(user_dated[2]) == 0):
                error = True
            if (int(user_dated[1]) == 1 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 3 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 5 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 7 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 8 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 10 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 12 and int(user_dated[0]) > 31):
                error = True
            if (int(user_dated[1]) == 4 and int(user_dated[0]) > 30) or (
                int(user_dated[1]) == 6 and int(user_dated[0]) > 30) or (
                int(user_dated[1]) == 9 and int(user_dated[0]) > 30) or (
                int(user_dated[1]) == 11 and int(user_dated[0]) > 30):
                error = True
            if int(user_dated[1]) > 12:
                error = True

            if error == False:
                date_now = datetime.strptime(message.text, '%d.%m.%Y').date()
                delta = timedelta(days=1)
                conn = sqlite3.connect('ClientsBase.kts')
                cur = conn.cursor()
                conn_or = sqlite3.connect('OrdersBase.kts')
                cur_or = conn_or.cursor()

                if id == 1:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1]:
                                    sum_ += int(i[2])
                                    count_ += 1

                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

                    for el in sor_sum_max_list:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1

                        msg = bot.send_message(message.chat.id,
                                           f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    sum_checks = 0
                    count_checks = 0
                    for el in sor_sum_max_list:
                        sum_checks += el[12]
                        count_checks += el[11]

                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–°—É–º–º–∞ —á–µ–∫–æ–≤: {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {count_checks}')

                    msgs_id.append(msg)
                elif id == 2:  # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    for el in users:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1
                        sum_ = 0
                        count_ = 0
                        for i in orders:
                            if el[7] == i[1]:
                                sum_ += int(i[2])
                                count_ += 1

                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_, ref_count
                        ]
                        sum_max_list.append(sum_dict)

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
                    del sor_sum_max_list[0:-100]
                    for el in sor_sum_max_list:
                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {el[13]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
                    msgs_id.append(msg)
                elif id == 3:  # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    for el in users:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1
                        sum_ = 0
                        count_ = 0
                        for i in orders:
                            if el[7] == i[1]:
                                sum_ += int(i[2])
                                count_ += 1

                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_, ref_count
                        ]
                        sum_max_list.append(sum_dict)

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[8])
                    del sor_sum_max_list[0:-100]
                    for el in sor_sum_max_list:
                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {el[8]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–æ–Ω—É—Å–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:')
                    msgs_id.append(msg)
                elif id == 4:  # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1]:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_, 0
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    for el in new_l:
                        if el[11] != 0:
                            el[13] = int(el[12] / el[11])

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[13])
                    del sor_sum_max_list[0:-100]
                    for el in sor_sum_max_list:
                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {el[13]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É:')
                    msgs_id.append(msg)
                elif id == 5:  # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1]:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[11])
                    del sor_sum_max_list[0:-100]
                    for el in sor_sum_max_list:
                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id, '–¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–∫–æ–≤:')
                    msgs_id.append(msg)
                elif id == 6:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú–£–ñ–ß–ò–ù –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1]:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0 and el[3] != '–ñ–µ–Ω':
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
                    del sor_sum_max_list[0:-100]
                    for el in sor_sum_max_list:
                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ú—É–∂—á–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                elif id == 7:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1]:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0 and el[3] != '–ú—É–∂':
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])
                    del sor_sum_max_list[0:-100]
                    for el in sor_sum_max_list:
                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ —É –ñ–µ–Ω—â–∏–Ω:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                elif id == 8:  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
                    count_clients_mau(message)
                cur_or.close()
                conn_or.close()
                cur.close()
                conn.close()
            else:
                msg = bot.send_message(message.chat.id,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
                msgs_id.append(msg)

                bot.register_next_step_handler(message, date_settings_two, id, date_end)
        else:
            msg = bot.send_message(message.chat.id,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, date_settings_two, id, date_end)
    else:
        msg = bot.send_message(message.chat.id,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, date_settings_two, id, date_end)
    user_states[usid] = False
    user_msg.append(msgs_id)

@bot.message_handler(commands=['del'])
def del_acc(message):
    chat_id = None
    for ad in admins:
        if message.chat.id == ad:
            chat_id = ad
    if chat_id != None:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
        bot.register_next_step_handler(message, delete_acc)
    else:
        bot.send_message(message.chat.id, f'–í–∞—à –∫–æ–¥ {message.chat.id}')

@bot.message_handler(commands=['deltimer'])
def del_t(message):
    chat_id = None
    for ad in admins:
        if message.chat.id == ad:
            chat_id = ad
    if chat_id != None:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
        bot.register_next_step_handler(message, delete_t)
    else:
        bot.send_message(message.chat.id, f'–í–∞—à –∫–æ–¥ {message.chat.id}')

def delete_acc(message):
    isCheckTrue = any(character.isdigit() for character in message.text)
    if isCheckTrue:
        id_check = message.text
        conn2 = sqlite3.connect('ClientsBase.kts')
        cur2 = conn2.cursor()
        cur2.execute('SELECT * FROM users')
        users = cur2.fetchall()
        isFind = False
        us_id = None
        us_referer = None
        for el in users:
            if int(id_check) == el[0]:
                us_id = el[0]
                us_referer = el[10]
                isFind = True

        if isFind:
            if str(us_referer) != 'None':
                cur2.execute(f'UPDATE users SET bonus = bonus - {boneses_ref} WHERE user_id = {us_referer}')
            cur2.execute(f'DELETE FROM users WHERE id = {us_id}')
            bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å—Ç–µ—Ä—Ç!')
            conn2.commit()
            cur2.close()
            conn2.close()
            return

def delete_t(message):
    isCheckTrue = any(character.isdigit() for character in message.text)
    if isCheckTrue:
        id_check = message.text
        conn2 = sqlite3.connect('ClientsBase.kts')
        cur2 = conn2.cursor()
        cur2.execute('SELECT * FROM bonuses')
        users = cur2.fetchall()
        isFind = False
        us_id = None
        us_referer = None
        for el in users:
            if int(id_check) == el[0]:
                us_id = el[0]
                isFind = True

        if isFind:
            cur2.execute(f'DELETE FROM bonuses WHERE id = {us_id}')
            bot.send_message(message.chat.id, '–ë–æ–Ω—É—Å–Ω—ã–π —Ç–∞–π–º–µ—Ä –±—ã–ª —Å—Ç–µ—Ä—Ç!')
            conn2.commit()
            cur2.close()
            conn2.close()
            return

def sum_in_old(call, date):
    usid = call.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(call.message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    b_all_time = types.KeyboardButton('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è')
    b_today = types.KeyboardButton('–ó–∞ —Å–µ–≥–æ–¥–Ω—è')
    b_yesterday = types.KeyboardButton('–ó–∞ –≤—á–µ—Ä–∞')
    b_week = types.KeyboardButton('–ó–∞ 7 –¥–Ω–µ–π')
    b_mounth = types.KeyboardButton('–ó–∞ 30 –¥–Ω–µ–π')
    markup.add(b_all_time)
    markup.add(b_today)
    markup.add(b_yesterday)
    markup.add(b_week)
    markup.add(b_mounth)

    msg = bot.send_message(call.message.chat.id,
                           '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞. –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ç–∞–∫–æ–≤ —Ñ–æ—Ä–º–∞—Ç–µ; [–î–î.–ú–ú.–ì–ì–ì–ì]\n–ò–ª–∏ –∂–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏',
                           reply_markup=markup)
    msgs_id.append(msg)
    user_msg.append(msgs_id)
    bot.register_next_step_handler(call.message, sum_in_old_one, date)

def sum_in_old_one(message, data):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    date_now = datetime.now().date().year
    date_10 = date_now - 10
    date_15 = date_now - 15
    date_20 = date_now - 20
    date_25 = date_now - 25
    date_30 = date_now - 30
    date_40 = date_now - 40

    if message.text == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if data == 10:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            # cur.execute('SELECT * FROM users WHERE sum_checks=(SELECT MAX(sum_checks) FROM users)')
            cur.execute('SELECT * FROM users GROUP BY sum_checks HAVING MAX(sum_checks) ORDER BY sum_checks DESC')
            sum_max = cur.fetchall()
            sum_max_list = []
            sum_checks = 0
            count_checks = 0
            for el in sum_max:
                if date_now >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_10:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]
                    ]
                    sum_checks += el[12]
                    count_checks += el[11]
                    sum_max_list.append(sum_dict)

            for el in list(reversed(sum_max_list)):
                ref_count = 0
                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id, f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 15:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            # cur.execute('SELECT * FROM users WHERE sum_checks=(SELECT MAX(sum_checks) FROM users)')
            cur.execute('SELECT * FROM users GROUP BY sum_checks HAVING MAX(sum_checks) ORDER BY sum_checks DESC')
            sum_max = cur.fetchall()
            sum_max_list = []
            sum_checks = 0
            count_checks = 0
            for el in sum_max:
                if date_10 - 1 > datetime.strptime(el[4], '%Y-%m-%d').year >= date_15:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]
                    ]
                    sum_checks += el[12]
                    count_checks += el[11]
                    sum_max_list.append(sum_dict)
            for el in list(reversed(sum_max_list)):
                ref_count = 0
                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 20:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            # cur.execute('SELECT * FROM users WHERE sum_checks=(SELECT MAX(sum_checks) FROM users)')
            cur.execute('SELECT * FROM users GROUP BY sum_checks HAVING MAX(sum_checks) ORDER BY sum_checks DESC')
            sum_max = cur.fetchall()
            sum_max_list = []
            sum_checks = 0
            count_checks = 0
            for el in sum_max:
                if date_15 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_20:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]
                    ]
                    sum_checks += el[12]
                    count_checks += el[11]
                    sum_max_list.append(sum_dict)
            for el in list(reversed(sum_max_list)):
                ref_count = 0
                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 25:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            # cur.execute('SELECT * FROM users WHERE sum_checks=(SELECT MAX(sum_checks) FROM users)')
            cur.execute('SELECT * FROM users GROUP BY sum_checks HAVING MAX(sum_checks) ORDER BY sum_checks DESC')
            sum_max = cur.fetchall()
            sum_max_list = []
            sum_checks = 0
            count_checks = 0
            for el in sum_max:
                if date_20 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_25:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]
                    ]
                    sum_checks += el[12]
                    count_checks += el[11]
                    sum_max_list.append(sum_dict)
            for el in list(reversed(sum_max_list)):
                ref_count = 0
                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 30:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            # cur.execute('SELECT * FROM users WHERE sum_checks=(SELECT MAX(sum_checks) FROM users)')
            cur.execute('SELECT * FROM users GROUP BY sum_checks HAVING MAX(sum_checks) ORDER BY sum_checks DESC')
            sum_max = cur.fetchall()
            sum_max_list = []
            sum_checks = 0
            count_checks = 0
            for el in sum_max:
                if date_25 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_30:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]
                    ]
                    sum_checks += el[12]
                    count_checks += el[11]
                    sum_max_list.append(sum_dict)
            for el in list(reversed(sum_max_list)):
                ref_count = 0
                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 40:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            # cur.execute('SELECT * FROM users WHERE sum_checks=(SELECT MAX(sum_checks) FROM users)')
            cur.execute('SELECT * FROM users GROUP BY sum_checks HAVING MAX(sum_checks) ORDER BY sum_checks DESC')
            sum_max = cur.fetchall()
            sum_max_list = []
            sum_checks = 0
            count_checks = 0
            for el in sum_max:
                if date_30 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_40:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]
                    ]
                    sum_checks += el[12]
                    count_checks += el[11]
                    sum_max_list.append(sum_dict)
            for el in list(reversed(sum_max_list)):
                ref_count = 0
                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 45:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()
            # cur.execute('SELECT * FROM users WHERE sum_checks=(SELECT MAX(sum_checks) FROM users)')
            cur.execute('SELECT * FROM users GROUP BY sum_checks HAVING MAX(sum_checks) ORDER BY sum_checks DESC')
            sum_max = cur.fetchall()
            sum_max_list = []
            sum_checks = 0
            count_checks = 0
            for el in sum_max:
                if date_40 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10], el[11], el[12]
                    ]
                    sum_checks += el[12]
                    count_checks += el[11]
                    sum_max_list.append(sum_dict)
            for el in list(reversed(sum_max_list)):
                ref_count = 0
                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1
                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        cur.close()
        conn.close()
        cur_or.close()
        conn_or.close()
    elif message.text == '–ó–∞ —Å–µ–≥–æ–¥–Ω—è':
        date = datetime.now().date()
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if data == 10:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_now >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_10:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 15:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_10 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_15:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 20:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_15 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_20:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 25:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_20 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_25:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 30:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_25 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_30:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 40:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_30 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year >= date_40:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 45:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_40 - 1 >= datetime.strptime(el[4], '%Y-%m-%d').year:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        cur.close()
        conn.close()
        cur_or.close()
        conn_or.close()
    elif message.text == '–ó–∞ –≤—á–µ—Ä–∞':
        date = datetime.now().date() - timedelta(days=1)
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if data == 10:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_now >= datetime.strptime(el[4],
                                                                                                  '%Y-%m-%d').year >= date_10:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 15:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_10 - 1 >= datetime.strptime(el[4],
                                                                                                 '%Y-%m-%d').year >= date_15:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 20:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_15 - 1 >= datetime.strptime(el[4],
                                                                                                 '%Y-%m-%d').year >= date_20:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 25:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_20 - 1 >= datetime.strptime(el[4],
                                                                                                 '%Y-%m-%d').year >= date_25:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 30:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_25 - 1 >= datetime.strptime(el[4],
                                                                                                 '%Y-%m-%d').year >= date_30:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 40:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_30 - 1 >= datetime.strptime(el[4],
                                                                                                 '%Y-%m-%d').year >= date_40:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 45:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            for el in users:
                sum_ = 0
                count_ = 0
                for i in orders:
                    if str(date) == str(i[5]) and el[7] == i[1] and date_40 - 1 >= datetime.strptime(el[4],
                                                                                                 '%Y-%m-%d').year:
                        sum_ += int(i[2])
                        count_ += 1
                if sum_ != 0:
                    sum_dict = [
                        el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                        count_,
                        sum_
                    ]
                    sum_max_list.append(sum_dict)

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        cur_or.close()
        conn_or.close()
        cur.close()
        conn.close()
    elif message.text == '–ó–∞ 7 –¥–Ω–µ–π':
        date_now = datetime.now().date()
        date_end = date_now - timedelta(days=7)
        delta = timedelta(days=1)
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if data == 10:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_now >= el[4].year >= date_10:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 15:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_10 - 1 >= datetime.strptime(el[4],
                                                                                                          '%Y-%m-%d').year >= date_15:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 20:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_15 - 1 >= datetime.strptime(el[4],
                                                                                                          '%Y-%m-%d').year >= date_20:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 25:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_20 - 1 >= datetime.strptime(el[4],
                                                                                                          '%Y-%m-%d').year >= date_25:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 30:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_25 - 1 >= datetime.strptime(el[4],
                                                                                                          '%Y-%m-%d').year >= date_30:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 40:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_30 - 1 >= datetime.strptime(el[4],
                                                                                                          '%Y-%m-%d').year >= date_40:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 45:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_40 - 1 >= datetime.strptime(el[4],
                                                                                                          '%Y-%m-%d').year :
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        cur_or.close()
        conn_or.close()
        cur.close()
        conn.close()
    elif message.text == '–ó–∞ 30 –¥–Ω–µ–π':
        date_now = datetime.now().date()
        date_end = date_now - timedelta(days=30)
        delta = timedelta(days=1)
        conn = sqlite3.connect('ClientsBase.kts')
        cur = conn.cursor()
        conn_or = sqlite3.connect('OrdersBase.kts')
        cur_or = conn_or.cursor()

        if data == 10:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_now >= el[4].year >= date_10:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 15:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_10 - 1 >= datetime.strptime(el[4],
                                                                                                         '%Y-%m-%d').year >= date_15:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 20:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_15 - 1 >= datetime.strptime(el[4],
                                                                                                         '%Y-%m-%d').year >= date_20:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 25:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_20 - 1 >= datetime.strptime(el[4],
                                                                                                         '%Y-%m-%d').year >= date_25:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 30:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_25 - 1 >= datetime.strptime(el[4],
                                                                                                         '%Y-%m-%d').year >= date_30:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 40:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_30 - 1 >= datetime.strptime(el[4],
                                                                                                         '%Y-%m-%d').year >= date_40:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        elif data == 45:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
            cur_or.execute(f'SELECT * FROM orders')
            orders = cur_or.fetchall()
            cur.execute('SELECT * FROM users')
            users = cur.fetchall()

            sum_max_list = []
            while date_end <= date_now:
                for el in users:
                    sum_ = 0
                    count_ = 0
                    for i in orders:
                        if str(date_end) == str(i[5]) and el[7] == i[1] and date_40 - 1 >= datetime.strptime(el[4],
                                                                                                         '%Y-%m-%d').year:
                            sum_ += int(i[2])
                            count_ += 1
                    if sum_ != 0:
                        sum_dict = [
                            el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                            count_,
                            sum_
                        ]
                        sum_max_list.append(sum_dict)
                date_end += delta

            new_l = []
            indexes = []
            for i, el in enumerate(sum_max_list):
                for il in sum_max_list[i + 1:]:
                    if el[7] == il[7]:
                        il[12] += el[12]
                        il[11] += el[11]
                        indexes.append(el[7])
                        new_l.append(il)
            for i in indexes:
                for el in sum_max_list:
                    if el[7] == i:
                        sum_max_list.remove(el)

            new_l += sum_max_list

            sum_checks = 0
            count_checks = 0
            for el in new_l:
                sum_checks += el[12]
                count_checks += el[11]

            sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

            for el in sor_sum_max_list:
                ref_count = 0

                for i in users:
                    if el[7] == i[10]:
                        ref_count += 1

                msg = bot.send_message(message.chat.id,
                                       f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                msgs_id.append(msg)
            msg = bot.send_message(message.chat.id,
                                   f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
            msgs_id.append(msg)
        cur_or.close()
        conn_or.close()
        cur.close()
        conn.close()
    elif len(message.text) == 10:
        i = 0
        user_dated = message.text.split('.')
        if len(user_dated) == 3:
            for date in user_dated:
                for c in date:
                    if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9':
                        i += 1

        if i == 8:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error = False
            if (int(user_dated[1]) == 2 and int(user_dated[0]) > 28) or (int(user_dated[0]) == 0) or (
                    int(user_dated[1]) == 0) or (int(user_dated[2]) == 0):
                error = True
            if (int(user_dated[1]) == 1 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 3 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 5 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 7 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 8 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 10 and int(user_dated[0]) > 31) or (
                    int(user_dated[1]) == 12 and int(user_dated[0]) > 31):
                error = True
            if (int(user_dated[1]) == 4 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 6 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 9 and int(user_dated[0]) > 30) or (
                    int(user_dated[1]) == 11 and int(user_dated[0]) > 30):
                error = True
            if int(user_dated[1]) > 12:
                error = True

            if error == False:
                date_end = datetime.strptime(message.text, '%d.%m.%Y').date()
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É')
                msgs_id.append(msg)
                bot.register_next_step_handler(message, sum_in_old_two, data, date_end)

            else:
                msg = bot.send_message(message.chat.id,
                                       '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
                msgs_id.append(msg)

                bot.register_next_step_handler(message, sum_in_old_one, data)
        else:
            msg = bot.send_message(message.chat.id,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, sum_in_old_one, data)
    else:
        msg = bot.send_message(message.chat.id,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, sum_in_old_one, data)
    user_states[usid] = False
    user_msg.append(msgs_id)

def sum_in_old_two(message, data, date_end):
    usid = message.from_user.id
    for i in user_msg:
        if i[0] == usid:
            i.pop(0)
            for m in i:
                try:
                    bot.delete_message(message.chat.id, m.message_id)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            user_msg.remove(i)
    msgs_id = []
    msgs_id.append(usid)
    msgs_id.append(message)

    if usid in user_states and user_states[usid]:
        return
    user_states[usid] = True

    date_now = datetime.now().date().year
    date_10 = date_now - 10
    date_15 = date_now - 15
    date_20 = date_now - 20
    date_25 = date_now - 25
    date_30 = date_now - 30
    date_40 = date_now - 40

    if len(message.text) == 10:
        i = 0
        user_dated = message.text.split('.')
        if len(user_dated) == 3:
            for date in user_dated:
                for c in date:
                    if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9':
                        i += 1

        if i == 8:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            error = False
            if (int(user_dated[1]) == 2 and int(user_dated[0]) > 28) or (int(user_dated[0]) == 0) or (
                int(user_dated[1]) == 0) or (int(user_dated[2]) == 0):
                error = True
            if (int(user_dated[1]) == 1 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 3 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 5 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 7 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 8 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 10 and int(user_dated[0]) > 31) or (
                int(user_dated[1]) == 12 and int(user_dated[0]) > 31):
                error = True
            if (int(user_dated[1]) == 4 and int(user_dated[0]) > 30) or (
                int(user_dated[1]) == 6 and int(user_dated[0]) > 30) or (
                int(user_dated[1]) == 9 and int(user_dated[0]) > 30) or (
                int(user_dated[1]) == 11 and int(user_dated[0]) > 30):
                error = True
            if int(user_dated[1]) > 12:
                error = True

            if error == False:
                date_now = datetime.strptime(message.text, '%d.%m.%Y').date()
                delta = timedelta(days=1)
                conn = sqlite3.connect('ClientsBase.kts')
                cur = conn.cursor()
                conn_or = sqlite3.connect('OrdersBase.kts')
                cur_or = conn_or.cursor()

                if data == 10:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1] and date_now >= el[4].year >= date_10:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

                    for el in sor_sum_max_list:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1

                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                elif data == 15:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1] and date_10 - 1 >= datetime.strptime(el[4],
                                                                                                                 '%Y-%m-%d').year >= date_15:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

                    for el in sor_sum_max_list:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1

                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                elif data == 20:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1] and date_15 - 1 >= datetime.strptime(el[4],
                                                                                                                 '%Y-%m-%d').year >= date_20:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

                    for el in sor_sum_max_list:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1

                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                elif data == 25:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1] and date_20 - 1 >= datetime.strptime(el[4],
                                                                                                                 '%Y-%m-%d').year >= date_25:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

                    for el in sor_sum_max_list:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1

                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                elif data == 30:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1] and date_25 - 1 >= datetime.strptime(el[4],
                                                                                                                 '%Y-%m-%d').year >= date_30:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

                    for el in sor_sum_max_list:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1

                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                elif data == 40:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1] and date_30 - 1 >= datetime.strptime(el[4],
                                                                                                                 '%Y-%m-%d').year >= date_40:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

                    for el in sor_sum_max_list:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1

                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                elif data == 45:  # –ü–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞ –ø–µ—Ä–≤—ã–µ —Å—Ç–æ
                    cur_or.execute(f'SELECT * FROM orders')
                    orders = cur_or.fetchall()
                    cur.execute('SELECT * FROM users')
                    users = cur.fetchall()

                    sum_max_list = []
                    while date_end <= date_now:
                        for el in users:
                            sum_ = 0
                            count_ = 0
                            for i in orders:
                                if str(date_end) == str(i[5]) and el[7] == i[1] and date_40 - 1 >= datetime.strptime(el[4],
                                                                                                                 '%Y-%m-%d').year:
                                    sum_ += int(i[2])
                                    count_ += 1
                            if sum_ != 0:
                                sum_dict = [
                                    el[0], el[1], el[2], el[3], el[4], el[5], el[6], el[7], el[8], el[9], el[10],
                                    count_,
                                    sum_
                                ]
                                sum_max_list.append(sum_dict)
                        date_end += delta

                    new_l = []
                    indexes = []
                    for i, el in enumerate(sum_max_list):
                        for il in sum_max_list[i + 1:]:
                            if el[7] == il[7]:
                                il[12] += el[12]
                                il[11] += el[11]
                                indexes.append(el[7])
                                new_l.append(il)
                    for i in indexes:
                        for el in sum_max_list:
                            if el[7] == i:
                                sum_max_list.remove(el)

                    new_l += sum_max_list

                    sum_checks = 0
                    count_checks = 0
                    for el in new_l:
                        sum_checks += el[12]
                        count_checks += el[11]

                    sor_sum_max_list = sorted(new_l, key=lambda item: item[12])

                    for el in sor_sum_max_list:
                        ref_count = 0

                        for i in users:
                            if el[7] == i[10]:
                                ref_count += 1

                        msg = bot.send_message(message.chat.id,
                                               f'–ò–º—è: {el[1]}, –ù–æ–º–µ—Ä: {el[2]}, –ü–æ–ª: {el[3]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {el[4]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {el[9]}, –£ –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}, –°—É–º–º–∞ –≤—ã–∫—É–ø–∞: {el[12]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {el[11]}')
                        msgs_id.append(msg)
                    msg = bot.send_message(message.chat.id,
                                           f'–¢–æ–ø –ø–æ —Å—É–º–º–µ –≤—ã–∫—É–ø–∞:\n–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞ {sum_checks}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ {count_checks}')
                    msgs_id.append(msg)
                cur_or.close()
                conn_or.close()
                cur.close()
                conn.close()
            else:
                msg = bot.send_message(message.chat.id,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
                msgs_id.append(msg)

                bot.register_next_step_handler(message, sum_in_old_two, data, date_end)
        else:
            msg = bot.send_message(message.chat.id,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
            msgs_id.append(msg)
            bot.register_next_step_handler(message, sum_in_old_two, data, date_end)
    else:
        msg = bot.send_message(message.chat.id,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: [–î–î.–ú–ú.–ì–ì–ì–ì]\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞)')
        msgs_id.append(msg)
        bot.register_next_step_handler(message, sum_in_old_two, data, date_end)
    user_states[usid] = False
    user_msg.append(msgs_id)

def count_clients_mau(message):
    conn = sqlite3.connect('ClientsBase.kts')
    cur = conn.cursor()

    today = datetime.today().date()

    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    sum_dict = []
    for el in users:
        count_10 = 0
        count_15 = 0
        count_20 = 0
        count_25 = 0
        count_30 = 0
        count_40 = 0
        count_45 = 0
        age = today.year - datetime.strptime(el[4], '%Y-%m-%d').year - ((today.month, today.day) < (datetime.strptime(el[4], '%Y-%m-%d').month, datetime.strptime(el[4], '%Y-%m-%d').day))
        if 0 <= age <= 10:
            count_10 += 1
        elif 11 <= age <= 15:
            count_15 += 1
        elif 16 <= age <= 20:
            count_20 += 1
        elif 21 <= age <= 25:
            count_25 += 1
        elif 26 <= age <= 30:
            count_30 += 1
        elif 31 <= age <= 40:
            count_40 += 1
        elif 41 <= age:
            count_45 += 1
        if sum_dict:
            sum_dict[0] += 1
            sum_dict[1] += count_10
            sum_dict[2] += count_15
            sum_dict[3] += count_20
            sum_dict[4] += count_25
            sum_dict[5] += count_30
            sum_dict[6] += count_40
            sum_dict[7] += count_45
        else:
            sum_dict = [
            1, count_10, count_15, count_20, count_25, count_30, count_40, count_45
        ]

    bot.send_message(message.chat.id,
                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {sum_dict[0]}\n–û—Ç 6 –¥–æ 10: {sum_dict[1]}\n–û—Ç 11 –¥–æ 15: {sum_dict[2]}\n–û—Ç 16 –¥–æ 20: {sum_dict[3]}\n–û—Ç 21 –¥–æ 25: {sum_dict[4]}\n–û—Ç 26 –¥–æ 30: {sum_dict[5]}\n–û—Ç 31 –¥–æ 40: {sum_dict[6]}\n–û—Ç 41 –∏ –±–æ–ª—å—à–µ: {sum_dict[7]}')

    cur.close()
    conn.close()

if __name__ == '__main__':
    thread = threading.Thread(target=foo)
    thread.start() # –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(e)
            sleep(15)